{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "SIT742Task1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EMX0qNbHot1x"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "- Name:  Mahad Rashid\n",
        "- Student ID: XXXXXXXXX \n",
        "- Email: rashidmah@deakin.edu.au \n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cHdQMSVzJyip"
      },
      "source": [
        "## Overview\n",
        "\n",
        "In 2017, [Kaggle](https://www.kaggle.com) (a data science community and competition platform) conducted a survey on a large range of users registered as the data scientist in their platform. The survey data are broadly covered the skill set of the data scientists, the demographic of the data scientists, the feedback of the platform and many other information. \n",
        "\n",
        "In this task, you will need to \n",
        "\n",
        "- **Part 1**: Given the following two data sets, you are required to finish some required analysis, with the exploreation data analytics skills as well as visuilization skills\n",
        "     - [MCQResponses.csv](https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/MCQResponses.csv): Participants' answers to multiple choice questions. Each column contains the answers of one respondent to a specific question.     \n",
        "     - [ConversionRates.csv](https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/ConversionRates.csv): Currency conversion rates to USD. \n",
        "- **Part 2**: Given the following data set, you are required to find out top keywords for hiring the data scientists. \n",
        "    - [JobPostings.csv](https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/JobPostings.csv): Data scientists job advertising in US with job descriptions, from JobPikr.\n",
        "\n",
        "\n",
        "You will be required to complete the coding to answer the questions with a neat and clean format, and your commenting and adherence to code standards will also be considered when marking. Further information on Python standards, please visit https://www.python.org/dev/peps/pep-0008/ \n",
        "\n",
        "\n",
        "**Note**: You are not necessary to stick to the partial code provided, and you can write your own code to implement the required tasks. But you should provide sufficient comments.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0d3FjO8fJyir"
      },
      "source": [
        "## Part 1 - What we could know about the Data Scientists? "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "06c9b38b-000e-4b8a-95f0-65a93bb332f2",
        "_uuid": "2bfa8ca86a226c9900a67a02236a072274bc0d18",
        "id": "NuDhBkqaot17"
      },
      "source": [
        "### 1.0. Libraries and data files\n",
        "<a id=\"Load data\"></a>\n",
        "***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "Tzx_NMcsJyiv",
        "outputId": "54746ab0-75bc-466d-826b-41766256eaf7"
      },
      "source": [
        "!pip install wget\n",
        "!pip install openpyxl"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: wget in c:\\users\\mahad\\anaconda3\\lib\\site-packages (3.2)\n",
            "Requirement already satisfied: openpyxl in c:\\users\\mahad\\anaconda3\\lib\\site-packages (3.0.3)\n",
            "Requirement already satisfied: jdcal in c:\\users\\mahad\\anaconda3\\lib\\site-packages (from openpyxl) (1.4.1)\n",
            "Requirement already satisfied: et-xmlfile in c:\\users\\mahad\\anaconda3\\lib\\site-packages (from openpyxl) (1.0.1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "_cell_guid": "bf6d21b3-22d5-48e4-8a62-a50ef36bae42",
        "_kg_hide-input": true,
        "_kg_hide-output": false,
        "_uuid": "76567470049e7d7e878b76d72e81858f56bdbd2a",
        "id": "7AVjZqvmot2A",
        "outputId": "ec63c184-d598-45df-c414-ca05994ba38b"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as mpatches\n",
        "import pandas as pd\n",
        "from pandas import datetime\n",
        "import wget\n",
        "import seaborn as sns"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\Mahad\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: FutureWarning: The pandas.datetime class is deprecated and will be removed from pandas in a future version. Import from datetime module instead.\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "_cell_guid": "bf6d21b3-22d5-48e4-8a62-a50ef36bae42",
        "_kg_hide-input": true,
        "_kg_hide-output": false,
        "_uuid": "76567470049e7d7e878b76d72e81858f56bdbd2a",
        "id": "vQ5PXKqiOWKu"
      },
      "source": [
        "link_to_data = 'https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/MCQResponses.csv'\n",
        "DataSet_MCQResponses = wget.download(link_to_data)\n",
        "\n",
        "link_to_data = 'https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/ConversionRates.csv'\n",
        "DataSet_ConversionRates = wget.download(link_to_data)\n",
        "\n",
        "link_to_data = 'https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/JobPostings.csv'\n",
        "DataSet_JobPostings = wget.download(link_to_data)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xt84oidr-jof"
      },
      "source": [
        " <div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "    You are required to load MCQResponses.csv into dataframe df_demog, and check the data statistics and general infommation by printing its top 5 rows.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "collapsed": true,
        "id": "Xl5VV8v4ot2N",
        "outputId": "34fb6c39-5e20-45a5-9b25-64ca4481296d"
      },
      "source": [
        "# Your code\n",
        "df_demog=pd.read_csv('MCQResponses.csv')  # File Read & Store\n",
        "\n",
        "print(df_demog.info())  # checking the data statistics\n",
        "df_demog[:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4327 entries, 0 to 4326\n",
            "Data columns (total 17 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   GenderSelect                  4327 non-null   object \n",
            " 1   Country                       4327 non-null   object \n",
            " 2   Age                           4327 non-null   int64  \n",
            " 3   EmploymentStatus              4327 non-null   object \n",
            " 4   CodeWriter                    4327 non-null   object \n",
            " 5   CurrentJobTitleSelect         4327 non-null   object \n",
            " 6   TitleFit                      4251 non-null   object \n",
            " 7   CurrentEmployerType           4275 non-null   object \n",
            " 8   MLToolNextYearSelect          4206 non-null   object \n",
            " 9   MLMethodNextYearSelect        4170 non-null   object \n",
            " 10  LanguageRecommendationSelect  4228 non-null   object \n",
            " 11  FormalEducation               4327 non-null   object \n",
            " 12  MajorSelect                   3952 non-null   object \n",
            " 13  FirstTrainingSelect           4324 non-null   object \n",
            " 14  CompensationAmount            4327 non-null   float64\n",
            " 15  CompensationCurrency          4327 non-null   object \n",
            " 16  JobSatisfaction               4317 non-null   object \n",
            "dtypes: float64(1), int64(1), object(15)\n",
            "memory usage: 574.8+ KB\n",
            "None\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GenderSelect</th>\n",
              "      <th>Country</th>\n",
              "      <th>Age</th>\n",
              "      <th>EmploymentStatus</th>\n",
              "      <th>CodeWriter</th>\n",
              "      <th>CurrentJobTitleSelect</th>\n",
              "      <th>TitleFit</th>\n",
              "      <th>CurrentEmployerType</th>\n",
              "      <th>MLToolNextYearSelect</th>\n",
              "      <th>MLMethodNextYearSelect</th>\n",
              "      <th>LanguageRecommendationSelect</th>\n",
              "      <th>FormalEducation</th>\n",
              "      <th>MajorSelect</th>\n",
              "      <th>FirstTrainingSelect</th>\n",
              "      <th>CompensationAmount</th>\n",
              "      <th>CompensationCurrency</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Male</td>\n",
              "      <td>United States</td>\n",
              "      <td>56</td>\n",
              "      <td>Independent contractor, freelancer, or self-em...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Operations Research Practitioner</td>\n",
              "      <td>Poorly</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>TensorFlow</td>\n",
              "      <td>Neural Nets</td>\n",
              "      <td>Python</td>\n",
              "      <td>Master's degree</td>\n",
              "      <td>Mathematics or statistics</td>\n",
              "      <td>University courses</td>\n",
              "      <td>250000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>10 - Highly Satisfied</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Female</td>\n",
              "      <td>Australia</td>\n",
              "      <td>43</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Business Analyst</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by non-profit or NGO</td>\n",
              "      <td>Microsoft Excel Data Mining</td>\n",
              "      <td>Link Analysis</td>\n",
              "      <td>Python</td>\n",
              "      <td>Bachelor's degree</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Work</td>\n",
              "      <td>80000.0</td>\n",
              "      <td>AUD</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Male</td>\n",
              "      <td>Russia</td>\n",
              "      <td>33</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Software Developer/Software Engineer</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by a company that doesn't perform adv...</td>\n",
              "      <td>C/C++</td>\n",
              "      <td>Deep learning</td>\n",
              "      <td>Python</td>\n",
              "      <td>Bachelor's degree</td>\n",
              "      <td>Other</td>\n",
              "      <td>Self-taught</td>\n",
              "      <td>1200000.0</td>\n",
              "      <td>RUB</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Male</td>\n",
              "      <td>India</td>\n",
              "      <td>27</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by professional services/consulting f...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Deep learning</td>\n",
              "      <td>Python</td>\n",
              "      <td>Bachelor's degree</td>\n",
              "      <td>Electrical Engineering</td>\n",
              "      <td>University courses</td>\n",
              "      <td>95000.0</td>\n",
              "      <td>INR</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>Taiwan</td>\n",
              "      <td>26</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Software Developer/Software Engineer</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by professional services/consulting firm</td>\n",
              "      <td>TensorFlow</td>\n",
              "      <td>Deep learning</td>\n",
              "      <td>Python</td>\n",
              "      <td>Master's degree</td>\n",
              "      <td>Computer Science</td>\n",
              "      <td>Online courses (coursera, udemy, edx, etc.)</td>\n",
              "      <td>1100000.0</td>\n",
              "      <td>TWD</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  GenderSelect        Country  Age  \\\n",
              "0         Male  United States   56   \n",
              "1       Female      Australia   43   \n",
              "2         Male         Russia   33   \n",
              "3         Male          India   27   \n",
              "4         Male         Taiwan   26   \n",
              "\n",
              "                                    EmploymentStatus CodeWriter  \\\n",
              "0  Independent contractor, freelancer, or self-em...        Yes   \n",
              "1                                 Employed full-time        Yes   \n",
              "2                                 Employed full-time        Yes   \n",
              "3                                 Employed full-time        Yes   \n",
              "4                                 Employed full-time        Yes   \n",
              "\n",
              "                  CurrentJobTitleSelect TitleFit  \\\n",
              "0      Operations Research Practitioner   Poorly   \n",
              "1                      Business Analyst     Fine   \n",
              "2  Software Developer/Software Engineer     Fine   \n",
              "3                        Data Scientist     Fine   \n",
              "4  Software Developer/Software Engineer     Fine   \n",
              "\n",
              "                                 CurrentEmployerType  \\\n",
              "0                                      Self-employed   \n",
              "1                      Employed by non-profit or NGO   \n",
              "2  Employed by a company that doesn't perform adv...   \n",
              "3  Employed by professional services/consulting f...   \n",
              "4  Employed by professional services/consulting firm   \n",
              "\n",
              "          MLToolNextYearSelect MLMethodNextYearSelect  \\\n",
              "0                   TensorFlow            Neural Nets   \n",
              "1  Microsoft Excel Data Mining          Link Analysis   \n",
              "2                        C/C++          Deep learning   \n",
              "3                        Other          Deep learning   \n",
              "4                   TensorFlow          Deep learning   \n",
              "\n",
              "  LanguageRecommendationSelect    FormalEducation                MajorSelect  \\\n",
              "0                       Python    Master's degree  Mathematics or statistics   \n",
              "1                       Python  Bachelor's degree                        NaN   \n",
              "2                       Python  Bachelor's degree                      Other   \n",
              "3                       Python  Bachelor's degree     Electrical Engineering   \n",
              "4                       Python    Master's degree           Computer Science   \n",
              "\n",
              "                           FirstTrainingSelect  CompensationAmount  \\\n",
              "0                           University courses            250000.0   \n",
              "1                                         Work             80000.0   \n",
              "2                                  Self-taught           1200000.0   \n",
              "3                           University courses             95000.0   \n",
              "4  Online courses (coursera, udemy, edx, etc.)           1100000.0   \n",
              "\n",
              "  CompensationCurrency        JobSatisfaction  \n",
              "0                  USD  10 - Highly Satisfied  \n",
              "1                  AUD                      7  \n",
              "2                  RUB                      7  \n",
              "3                  INR                      7  \n",
              "4                  TWD                      5  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7gclqLjREEe7"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "    Check which columns have NAs (don't remove them now), and for each of those columns, display how many records with values\n",
        "\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.0.A** Please include your result for this coding task into your report, with proper section title '1.0.A'.\n",
        "</div>\n",
        "    </div>\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 156
        },
        "collapsed": true,
        "id": "jk5oshZLot2U",
        "outputId": "d600a287-7465-48f8-8d22-c8b56cf7fb61"
      },
      "source": [
        "nan_values=df_demog.isna()  # isna() function checks which column has missing values\n",
        "nan_columns=nan_values.any()  # any() function returns bolean values for each column\n",
        "columns_with_nan = df_demog.columns[nan_columns].tolist()\n",
        "print(columns_with_nan)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['TitleFit', 'CurrentEmployerType', 'MLToolNextYearSelect', 'MLMethodNextYearSelect', 'LanguageRecommendationSelect', 'MajorSelect', 'FirstTrainingSelect', 'JobSatisfaction']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "collapsed": true,
        "id": "AXyiiOEGot2a",
        "outputId": "7642a05c-2e78-4d78-8af5-5e7396e3169e"
      },
      "source": [
        "# count of values other than NA in every column\n",
        "print(df_demog[columns_with_nan].notnull().sum())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "TitleFit                        4251\n",
            "CurrentEmployerType             4275\n",
            "MLToolNextYearSelect            4206\n",
            "MLMethodNextYearSelect          4170\n",
            "LanguageRecommendationSelect    4228\n",
            "MajorSelect                     3952\n",
            "FirstTrainingSelect             4324\n",
            "JobSatisfaction                 4317\n",
            "dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MclqalahEVm-"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "    Select the users whose current job title is 'Data Scientist', and store into variable df_demog_ds    \n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.0.B** Please include your result of `how many Data Scientists?' into your report, with proper section title  '1.0.B'.\n",
        "</div>\n",
        "</div>\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "sjdZZOc8ot2g",
        "outputId": "240ce3ed-46ea-4d85-e0c9-91cfd043e5da"
      },
      "source": [
        "df_demog_ds=df_demog.loc[df_demog['CurrentJobTitleSelect'] == 'Data Scientist'] \n",
        "print('The number of users whose current job title is Data Scientist are: ') \n",
        "print(len(df_demog_ds)) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number of users whose current job title is Data Scientist are: \n",
            "1263\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "3e161447-2816-45ec-872f-3a20da79c042",
        "_uuid": "d6bdc03f0c63a08754efc13378661dc986d2bcb8",
        "id": "iuhutBLOot5O"
      },
      "source": [
        "### 1.1. Education\n",
        "<a id=\"education\"></a>\n",
        "***\n",
        "In data scientists job, education is important. Is it reasonable to ask data scientists to have a Master's or Doctoral degree? Let's find out. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yHyeeZvDot5Q"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "    Plot and display as text output the number and percentage of data scientist with each type of formal education. \n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.1.A** Please include your running result of this coding task into your report, with proper section title  '1.1.A'.\n",
        "</div>\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        },
        "collapsed": true,
        "id": "lRXfdfvgot5S",
        "outputId": "0e75e2b5-4e61-4e9c-cb70-141484e5fd45"
      },
      "source": [
        "\n",
        "plt.title('Percentage of Data Scientist with each type of Education')\n",
        "plt.xlabel('Type Of Education')\n",
        "plt.ylabel('Percentage')\n",
        "df_demog_ds['FormalEducation'].value_counts(normalize=True).mul(100).plot(kind='bar')  \n",
        "count_of_different_Education=df_demog_ds.groupby('FormalEducation').size() # size() returns count()\n",
        "percentage_different_education=df_demog_ds['FormalEducation'].value_counts(normalize=True) * 100\n",
        "\n",
        "# using  '\\033[1m' to make txt bold and using [0m to make it to normal again.\n",
        "print('\\033[1m' + 'Total Number of data scientist in each formal education category: ')  #\\033[1m  text bold\n",
        "print ('\\033[0m')  # '\\033[0m' to make text normal\n",
        "print(count_of_different_Education)\n",
        "print('\\n\\n')\n",
        "print('\\033[1m' + 'Percentage of data scientist in each formal education category: ')\n",
        "print ('\\033[0m')\n",
        "print(percentage_different_education)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1mTotal Number of data scientist in each formal education category: \n",
            "\u001b[0m\n",
            "FormalEducation\n",
            "Bachelor's degree                                                    252\n",
            "Doctoral degree                                                      326\n",
            "I did not complete any formal education past high school               6\n",
            "Master's degree                                                      635\n",
            "Professional degree                                                   25\n",
            "Some college/university study without earning a bachelor's degree     19\n",
            "dtype: int64\n",
            "\n",
            "\n",
            "\n",
            "\u001b[1mPercentage of data scientist in each formal education category: \n",
            "\u001b[0m\n",
            "Master's degree                                                      50.277118\n",
            "Doctoral degree                                                      25.811560\n",
            "Bachelor's degree                                                    19.952494\n",
            "Professional degree                                                   1.979414\n",
            "Some college/university study without earning a bachelor's degree     1.504355\n",
            "I did not complete any formal education past high school              0.475059\n",
            "Name: FormalEducation, dtype: float64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "551f7dba-71d3-4f77-8852-fce4f789d644",
        "_uuid": "31449fb18bfea68bb723b010b78dcab6c8fe5439",
        "id": "K-yMEEFLot7P"
      },
      "source": [
        "### 1.2. Salary\n",
        "<a id=\"salary\"></a>\n",
        "\n",
        "Data science is considered a very well paying role, let's find out the salary information. Since all of the respondents did not come from one country, we can assume that they gave their salaries in their countries currency. We have filtered the data for you and provided exchange rates in a file called *ConversionRates.csv* which should already be imported. \n",
        "\n",
        "First of all, you need to merge the multiple choice data with the *ConversionRates.csv* by using the compensation currency and originCountry respectively. And then you will need to multiply the compensation amount with exchangeRateAUS to have the Australian dollors."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BZaQ7vykot7U",
        "scrolled": false
      },
      "source": [
        "# Your code\n",
        "import openpyxl as xl\n",
        "# storing the conversation rate file into a variable\n",
        "df_conversationRates= pd.read_csv(DataSet_ConversionRates,skiprows=0,parse_dates=True,encoding='latin1')\n",
        "df_conversationRates=df_conversationRates.iloc[:,1:]\n",
        "\n",
        "# using merge function to merged the column\n",
        "merged_file=pd.merge(df_demog_ds,df_conversationRates,left_on='CompensationCurrency',right_on='originCountry')\n",
        "merged_file.drop('originCountry',axis=1,inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tyMNN-r3Jyjc"
      },
      "source": [
        "merged_file['Converted']=merged_File['CompensationAmount']*merged_file['exchangeRate']  # all converted salaries are in USD\n",
        "merged_file_aud=merged_file.loc[(merged_file['CompensationCurrency'] == 'AUD')] # we need to find the USD to AUD rate\n",
        "converstion_rate_ustoaud=round(merged_file_aud['exchangeRate'].iloc[0],4)   # getting the USD to AUD rate from column.\n",
        "merged_file['Converted']=merged_file['Converted']/converstion_rate_ustoaud # 1 AUD is equal to 0.8203  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cP1-7G7VOWKy"
      },
      "source": [
        "Code: Use the codes for each country to merge the files so that you can convert the salary data to Australian Dollars (AUD). Print out the maximum and median salary in AUD. Hint: think about what data type you have\n",
        "\n",
        "Report: 1.2.A In your report's section '1.2.A', answer what is the maximum and the median salary in AUD (this is for all respondents)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "id": "nA9JygJ2ot7v",
        "outputId": "2161e2cb-8d38-4a04-d207-48e1004411d5"
      },
      "source": [
        "# Column contains the converted salary in AUD \n",
        "merged_file['Converted']\n",
        "print('The maximum salary for all the reponsdents is: '+str(round(merged_file['Converted'].max(),4))) \n",
        "print('The maximum salary for all the reponsdents is: '+str(round(merged_file['Converted'].median(),4))) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The maximum salary for all the reponsdents is: 742720.4288\n",
            "The maximum salary for all the reponsdents is: 88829.6896\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kAtIFQgxMcR9"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "Plot a boxplot of the Australian respondents salary distribution. Print out the maximum and median salaries for Australian repsondnts.\n",
        "\n",
        "    \n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.2.B** In your report's section '1.2.B', answer what is the maximum and median salary in AUD for Australian respondents, and also include your plotted boxplot of this coding task into your report. \n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "collapsed": true,
        "id": "44a4HBqvMb_N",
        "outputId": "7ca7de86-0fb6-420d-ada5-386a26c36ee2"
      },
      "source": [
        "salary_australians=df_demog_ds[(df_demog_ds['Country']=='Australia') & (df_demog_ds['CompensationCurrency']=='AUD')]\n",
        "plt.title('Boxplot of salary in Australia')\n",
        "plt.xlabel('Salary')\n",
        "ax = sns.boxplot(x=salary_australians['CompensationAmount'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "collapsed": true,
        "id": "RZDQMRRfMbSl",
        "outputId": "b02aa5ee-ccfa-4d03-8d99-d3387ac74f90"
      },
      "source": [
        "print('The Maximum salary in AUD for Australian respondents: '+str(round(salary_australians['CompensationAmount'].max(),3)) )\n",
        "print('The Median salary in AUD for Australian respondents is: '+str(round(salary_australians['CompensationAmount'].median(),3)))   "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The Maximum salary in AUD for Australian respondents: 350000.0\n",
            "The Median salary in AUD for Australian respondents is: 143500.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b5TQQt_1LSG2"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "There are some outliers in the Australian salary plot. You are required to filter the salary of Australian respondents by removing any below 40,000 or above 250,000. \n",
        "\n",
        "    \n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.2.C** In your report's section '1.2.C', answer what is the new maximum and median salary in AUD for Australian respondents after filtering, and also include your plotted boxplot of this coding task into your report. \n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "collapsed": true,
        "id": "2OCbrDb9MUdb",
        "outputId": "cac625f8-363e-439b-af04-cbf0e54fb2d1"
      },
      "source": [
        "salary_australians_lessthan40k=Salary_Australians[salary_australians['CompensationAmount'] >= 40000]\n",
        "salary_australians_filtered=salary_australians_lessthan40k[salary_australians_lessthan40k['CompensationAmount'] <= 250000]\n",
        "print('The Maximum salary in AUD for Australian respondents: '+str(round(salary_australians_filtered['CompensationAmount'].max(),3)))\n",
        "print('The Median salary in AUD for Australian respondents is: '+str(round(salary_australians_filtered['CompensationAmount'].median(),3)))          "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The Maximum salary in AUD for Australian respondents: 250000.0\n",
            "The Median salary in AUD for Australian respondents is: 143500.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "collapsed": true,
        "id": "iDkjx7H1NhAj",
        "outputId": "fcef345c-3a9b-4897-927a-be05810b6d02"
      },
      "source": [
        "plt.title('Boxplot of filtered salary in Australia')\n",
        "ax = sns.boxplot(x=salary_australians_filtered['CompensationAmount'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "06c9b38b-000e-4b8a-95f0-65a93bb332f2",
        "_uuid": "2bfa8ca86a226c9900a67a02236a072274bc0d18",
        "id": "WL_oOonnot2l"
      },
      "source": [
        "### 1.3. Exploring the data scientist Demographics\n",
        "<a id=\"demographics\"></a>\n",
        "***\n",
        "\n",
        "#### 1.3.1 Age\n",
        "<a id=\"age\"></a>\n",
        "You will need to build a boxplot to explore the age of all data scientists. \n",
        "Your plot must have a label for each axis, a tittle and also show the outliers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "collapsed": true,
        "id": "3qi9JyJHot2o",
        "outputId": "a4a60cbe-b15a-4b71-c3fe-64027b81bb62"
      },
      "source": [
        "plt.title('Boxplot of Age')\n",
        "ax = sns.boxplot(x=df_demog_ds['Age'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQEUpSEOot2u"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "        <ol>\n",
        "        <li> Calculate the five descriptive statistics for age as shown on the boxplot, as well as the mean. Please round your mean to integer.</li>\n",
        "        <li> Regardless of the errors that the data show, we are interested in working-age data scientists, how many aged between 24 and 60. </li>\n",
        "        <li> How many respondents were under 18?</li>\n",
        "    </ol>\n",
        "    \n",
        "\n",
        "    \n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.3.A** In your report's section '1.3.A', answer \n",
        "        <ol>\n",
        "        <li> What is the mean age? </li>\n",
        "        <li> What is the median age? </li>\n",
        "        <li> how many data scientists aged between 24 and 60</li>\n",
        "        <li> how many respondents were under 18? </li>\n",
        "    </ol>\n",
        "    \n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "collapsed": true,
        "id": "NYdZjpklot2w",
        "outputId": "ff7d04f8-64e4-4f34-cf43-caa7588d7ed3"
      },
      "source": [
        "# calculating mean\n",
        "average=(df_demog_ds['Age'].mean())\n",
        "print('The mean is: '+ str(round(average)))\n",
        "\n",
        "# calculating median\n",
        "median=df_demog_ds['Age'].median()\n",
        "print('The median is: '+str(median))\n",
        "\n",
        "# calculating Maximum Age\n",
        "maximum_age= df_demog_ds['Age'].max()\n",
        "print('The maximum age is: '+str(maximum_age))\n",
        "\n",
        "minimum_age=df_demog_ds['Age'].min()\n",
        "print('The minimum age is: '+str(minimum_age))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The mean is: 34\n",
            "The median is: 32.0\n",
            "The maximum age is: 75\n",
            "The minimum age is: 16\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "collapsed": true,
        "id": "ngjxIviIot21",
        "outputId": "97a924af-e98b-4681-f6f0-c8aa303e5a09"
      },
      "source": [
        "quartiles=df_demog_ds.Age.quantile([0.25,0.5,0.75])\n",
        "print('The First, Second and Interquartiles of the Ages are: '+'\\n'+str(quartiles))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The First, Second and Interquartiles of the Ages are: \n",
            "0.25    27.0\n",
            "0.50    32.0\n",
            "0.75    37.5\n",
            "Name: Age, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "collapsed": true,
        "id": "bW7mnijvJyj1",
        "outputId": "53ddc018-37ad-4dff-d1ca-6946897e7e98"
      },
      "source": [
        "# finding the descriptive measure using the describe() function\n",
        "df_demog_ds['Age'].describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    1263.000000\n",
              "mean       33.720507\n",
              "std         8.860530\n",
              "min        16.000000\n",
              "25%        27.000000\n",
              "50%        32.000000\n",
              "75%        37.500000\n",
              "max        75.000000\n",
              "Name: Age, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "collapsed": true,
        "id": "RxcGZ97Uot3M",
        "outputId": "41415243-6be8-48c4-87e7-f98f7a46e1e7"
      },
      "source": [
        "# Your code: How many data scientsits aged between 24 and 60\n",
        "result=df_demog_ds.loc[(df_demog_ds['Age'] >= 24) & (df_demog_ds['Age'] <= 60)]\n",
        "print('The total number of Data Scinetist having age between 24 and 60 are: '+ str(result.shape[0]))\n",
        "result"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The total number of Data Scinetist having age between 24 and 60 are: 1188\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GenderSelect</th>\n",
              "      <th>Country</th>\n",
              "      <th>Age</th>\n",
              "      <th>EmploymentStatus</th>\n",
              "      <th>CodeWriter</th>\n",
              "      <th>CurrentJobTitleSelect</th>\n",
              "      <th>TitleFit</th>\n",
              "      <th>CurrentEmployerType</th>\n",
              "      <th>MLToolNextYearSelect</th>\n",
              "      <th>MLMethodNextYearSelect</th>\n",
              "      <th>LanguageRecommendationSelect</th>\n",
              "      <th>FormalEducation</th>\n",
              "      <th>MajorSelect</th>\n",
              "      <th>FirstTrainingSelect</th>\n",
              "      <th>CompensationAmount</th>\n",
              "      <th>CompensationCurrency</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Male</td>\n",
              "      <td>India</td>\n",
              "      <td>27</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by professional services/consulting f...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Deep learning</td>\n",
              "      <td>Python</td>\n",
              "      <td>Bachelor's degree</td>\n",
              "      <td>Electrical Engineering</td>\n",
              "      <td>University courses</td>\n",
              "      <td>95000.0</td>\n",
              "      <td>INR</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Male</td>\n",
              "      <td>Colombia</td>\n",
              "      <td>34</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by a company that doesn't perform adv...</td>\n",
              "      <td>Spark / MLlib</td>\n",
              "      <td>Ensemble Methods (e.g. boosting, bagging)</td>\n",
              "      <td>Python</td>\n",
              "      <td>Master's degree</td>\n",
              "      <td>Computer Science</td>\n",
              "      <td>Online courses (coursera, udemy, edx, etc.)</td>\n",
              "      <td>156000000.0</td>\n",
              "      <td>COP</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Male</td>\n",
              "      <td>Germany</td>\n",
              "      <td>41</td>\n",
              "      <td>Independent contractor, freelancer, or self-em...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>I don't plan on learning a new tool/technology</td>\n",
              "      <td>Factor Analysis</td>\n",
              "      <td>Python</td>\n",
              "      <td>I did not complete any formal education past h...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Work</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>EUR</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Male</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>36</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Poorly</td>\n",
              "      <td>Employed by a company that performs advanced a...</td>\n",
              "      <td>Microsoft Azure Machine Learning</td>\n",
              "      <td>Proprietary Algorithms</td>\n",
              "      <td>Python</td>\n",
              "      <td>Doctoral degree</td>\n",
              "      <td>Electrical Engineering</td>\n",
              "      <td>University courses</td>\n",
              "      <td>130000.0</td>\n",
              "      <td>GBP</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Male</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>30</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by a company that performs advanced a...</td>\n",
              "      <td>TensorFlow</td>\n",
              "      <td>Monte Carlo Methods</td>\n",
              "      <td>Python</td>\n",
              "      <td>Master's degree</td>\n",
              "      <td>Physics</td>\n",
              "      <td>Kaggle competitions</td>\n",
              "      <td>30000.0</td>\n",
              "      <td>EUR</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4311</th>\n",
              "      <td>Male</td>\n",
              "      <td>Iran</td>\n",
              "      <td>27</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Perfectly</td>\n",
              "      <td>Employed by professional services/consulting firm</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Doctoral degree</td>\n",
              "      <td>Mathematics or statistics</td>\n",
              "      <td>Other</td>\n",
              "      <td>400000000.0</td>\n",
              "      <td>IRR</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4315</th>\n",
              "      <td>Male</td>\n",
              "      <td>United States</td>\n",
              "      <td>32</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Perfectly</td>\n",
              "      <td>Employed by a company that performs advanced a...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Doctoral degree</td>\n",
              "      <td>Engineering (non-computer focused)</td>\n",
              "      <td>University courses</td>\n",
              "      <td>170000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4321</th>\n",
              "      <td>Male</td>\n",
              "      <td>France</td>\n",
              "      <td>38</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by professional services/consulting firm</td>\n",
              "      <td>Python</td>\n",
              "      <td>Text Mining</td>\n",
              "      <td>R</td>\n",
              "      <td>Master's degree</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Online courses (coursera, udemy, edx, etc.)</td>\n",
              "      <td>55000.0</td>\n",
              "      <td>EUR</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4324</th>\n",
              "      <td>Male</td>\n",
              "      <td>United States</td>\n",
              "      <td>50</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Perfectly</td>\n",
              "      <td>Employed by a company that performs advanced a...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Doctoral degree</td>\n",
              "      <td>Computer Science</td>\n",
              "      <td>University courses</td>\n",
              "      <td>200000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4326</th>\n",
              "      <td>Male</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>45</td>\n",
              "      <td>Independent contractor, freelancer, or self-em...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Master's degree</td>\n",
              "      <td>A social science</td>\n",
              "      <td>Work</td>\n",
              "      <td>10000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1188 rows × 17 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     GenderSelect         Country  Age  \\\n",
              "3            Male           India   27   \n",
              "9            Male        Colombia   34   \n",
              "10           Male         Germany   41   \n",
              "12           Male  United Kingdom   36   \n",
              "15           Male        Portugal   30   \n",
              "...           ...             ...  ...   \n",
              "4311         Male            Iran   27   \n",
              "4315         Male   United States   32   \n",
              "4321         Male          France   38   \n",
              "4324         Male   United States   50   \n",
              "4326         Male     South Korea   45   \n",
              "\n",
              "                                       EmploymentStatus CodeWriter  \\\n",
              "3                                    Employed full-time        Yes   \n",
              "9                                    Employed full-time        Yes   \n",
              "10    Independent contractor, freelancer, or self-em...        Yes   \n",
              "12                                   Employed full-time        Yes   \n",
              "15                                   Employed full-time        Yes   \n",
              "...                                                 ...        ...   \n",
              "4311                                 Employed full-time        Yes   \n",
              "4315                                 Employed full-time        Yes   \n",
              "4321                                 Employed full-time        Yes   \n",
              "4324                                 Employed full-time        Yes   \n",
              "4326  Independent contractor, freelancer, or self-em...        Yes   \n",
              "\n",
              "     CurrentJobTitleSelect   TitleFit  \\\n",
              "3           Data Scientist       Fine   \n",
              "9           Data Scientist       Fine   \n",
              "10          Data Scientist       Fine   \n",
              "12          Data Scientist     Poorly   \n",
              "15          Data Scientist       Fine   \n",
              "...                    ...        ...   \n",
              "4311        Data Scientist  Perfectly   \n",
              "4315        Data Scientist  Perfectly   \n",
              "4321        Data Scientist       Fine   \n",
              "4324        Data Scientist  Perfectly   \n",
              "4326        Data Scientist       Fine   \n",
              "\n",
              "                                    CurrentEmployerType  \\\n",
              "3     Employed by professional services/consulting f...   \n",
              "9     Employed by a company that doesn't perform adv...   \n",
              "10                                        Self-employed   \n",
              "12    Employed by a company that performs advanced a...   \n",
              "15    Employed by a company that performs advanced a...   \n",
              "...                                                 ...   \n",
              "4311  Employed by professional services/consulting firm   \n",
              "4315  Employed by a company that performs advanced a...   \n",
              "4321  Employed by professional services/consulting firm   \n",
              "4324  Employed by a company that performs advanced a...   \n",
              "4326                                      Self-employed   \n",
              "\n",
              "                                MLToolNextYearSelect  \\\n",
              "3                                              Other   \n",
              "9                                      Spark / MLlib   \n",
              "10    I don't plan on learning a new tool/technology   \n",
              "12                  Microsoft Azure Machine Learning   \n",
              "15                                        TensorFlow   \n",
              "...                                              ...   \n",
              "4311                                             NaN   \n",
              "4315                                             NaN   \n",
              "4321                                          Python   \n",
              "4324                                             NaN   \n",
              "4326                                             NaN   \n",
              "\n",
              "                         MLMethodNextYearSelect LanguageRecommendationSelect  \\\n",
              "3                                 Deep learning                       Python   \n",
              "9     Ensemble Methods (e.g. boosting, bagging)                       Python   \n",
              "10                              Factor Analysis                       Python   \n",
              "12                       Proprietary Algorithms                       Python   \n",
              "15                          Monte Carlo Methods                       Python   \n",
              "...                                         ...                          ...   \n",
              "4311                                        NaN                          NaN   \n",
              "4315                                        NaN                          NaN   \n",
              "4321                                Text Mining                            R   \n",
              "4324                                        NaN                          NaN   \n",
              "4326                                        NaN                          NaN   \n",
              "\n",
              "                                        FormalEducation  \\\n",
              "3                                     Bachelor's degree   \n",
              "9                                       Master's degree   \n",
              "10    I did not complete any formal education past h...   \n",
              "12                                      Doctoral degree   \n",
              "15                                      Master's degree   \n",
              "...                                                 ...   \n",
              "4311                                    Doctoral degree   \n",
              "4315                                    Doctoral degree   \n",
              "4321                                    Master's degree   \n",
              "4324                                    Doctoral degree   \n",
              "4326                                    Master's degree   \n",
              "\n",
              "                             MajorSelect  \\\n",
              "3                 Electrical Engineering   \n",
              "9                       Computer Science   \n",
              "10                                   NaN   \n",
              "12                Electrical Engineering   \n",
              "15                               Physics   \n",
              "...                                  ...   \n",
              "4311           Mathematics or statistics   \n",
              "4315  Engineering (non-computer focused)   \n",
              "4321                                 NaN   \n",
              "4324                    Computer Science   \n",
              "4326                    A social science   \n",
              "\n",
              "                              FirstTrainingSelect  CompensationAmount  \\\n",
              "3                              University courses             95000.0   \n",
              "9     Online courses (coursera, udemy, edx, etc.)         156000000.0   \n",
              "10                                           Work            150000.0   \n",
              "12                             University courses            130000.0   \n",
              "15                            Kaggle competitions             30000.0   \n",
              "...                                           ...                 ...   \n",
              "4311                                        Other         400000000.0   \n",
              "4315                           University courses            170000.0   \n",
              "4321  Online courses (coursera, udemy, edx, etc.)             55000.0   \n",
              "4324                           University courses            200000.0   \n",
              "4326                                         Work             10000.0   \n",
              "\n",
              "     CompensationCurrency JobSatisfaction  \n",
              "3                     INR               7  \n",
              "9                     COP               9  \n",
              "10                    EUR               8  \n",
              "12                    GBP               7  \n",
              "15                    EUR               7  \n",
              "...                   ...             ...  \n",
              "4311                  IRR             NaN  \n",
              "4315                  USD               7  \n",
              "4321                  EUR               5  \n",
              "4324                  USD               7  \n",
              "4326                  USD               6  \n",
              "\n",
              "[1188 rows x 17 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 235
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "collapsed": true,
        "id": "3fehgZuEJyj8",
        "outputId": "ab079e51-749e-460c-e4d9-a5c23a514ede"
      },
      "source": [
        "# Your Code: how many respondents under 18?\n",
        "respondents_under_18=df_demog_ds.loc[df_demog_ds['Age'] < 18]\n",
        "print('The total number of respondents having age less than 18 are: '+ str(respondents_under_18.shape[0]))\n",
        "respondents_under_18"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The total number of respondents having age less than 18 are: 1\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GenderSelect</th>\n",
              "      <th>Country</th>\n",
              "      <th>Age</th>\n",
              "      <th>EmploymentStatus</th>\n",
              "      <th>CodeWriter</th>\n",
              "      <th>CurrentJobTitleSelect</th>\n",
              "      <th>TitleFit</th>\n",
              "      <th>CurrentEmployerType</th>\n",
              "      <th>MLToolNextYearSelect</th>\n",
              "      <th>MLMethodNextYearSelect</th>\n",
              "      <th>LanguageRecommendationSelect</th>\n",
              "      <th>FormalEducation</th>\n",
              "      <th>MajorSelect</th>\n",
              "      <th>FirstTrainingSelect</th>\n",
              "      <th>CompensationAmount</th>\n",
              "      <th>CompensationCurrency</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>535</th>\n",
              "      <td>Male</td>\n",
              "      <td>United States</td>\n",
              "      <td>16</td>\n",
              "      <td>Independent contractor, freelancer, or self-em...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>Fine</td>\n",
              "      <td>Employed by professional services/consulting f...</td>\n",
              "      <td>Python</td>\n",
              "      <td>Genetic &amp; Evolutionary Algorithms</td>\n",
              "      <td>R</td>\n",
              "      <td>Some college/university study without earning ...</td>\n",
              "      <td>Mathematics or statistics</td>\n",
              "      <td>Self-taught</td>\n",
              "      <td>50000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    GenderSelect        Country  Age  \\\n",
              "535         Male  United States   16   \n",
              "\n",
              "                                      EmploymentStatus CodeWriter  \\\n",
              "535  Independent contractor, freelancer, or self-em...        Yes   \n",
              "\n",
              "    CurrentJobTitleSelect TitleFit  \\\n",
              "535        Data Scientist     Fine   \n",
              "\n",
              "                                   CurrentEmployerType MLToolNextYearSelect  \\\n",
              "535  Employed by professional services/consulting f...               Python   \n",
              "\n",
              "                MLMethodNextYearSelect LanguageRecommendationSelect  \\\n",
              "535  Genetic & Evolutionary Algorithms                            R   \n",
              "\n",
              "                                       FormalEducation  \\\n",
              "535  Some college/university study without earning ...   \n",
              "\n",
              "                   MajorSelect FirstTrainingSelect  CompensationAmount  \\\n",
              "535  Mathematics or statistics         Self-taught             50000.0   \n",
              "\n",
              "    CompensationCurrency JobSatisfaction  \n",
              "535                  USD               5  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c-al5HYdot3W"
      },
      "source": [
        "#### 1.3.2 Gender\n",
        "<a id=\"gender\"></a>\n",
        "We are interested in the gender of respondents. Nowadays, the gender equity is important for companies and organizations. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "4b0c5cbc-a703-4b39-95bd-510f07ece6c0",
        "_uuid": "214cae932a19a586e341914443aa89e62009e6c4",
        "id": "aVdtFL5wot3Y"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "Plot the gender distribution of the data scientist users using a Barchart. \n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "collapsed": true,
        "id": "OcKUWzqqot3Z",
        "outputId": "401bc6aa-291d-4808-86f2-17994f8e8ef2"
      },
      "source": [
        "plt.title('Gender of Data Scientists')\n",
        "plt.xlabel('Gender')\n",
        "plt.ylabel('No of Data Scientists')\n",
        "df_demog_ds['GenderSelect'].value_counts().plot(kind='bar')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x24e0a02c8c8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lspmz-WkOWK3"
      },
      "source": [
        "Now let's see if any relationship between gender and age\n",
        "\n",
        "Create a box plot showing the age of all the data scientists according to gender (men, women and other identity)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "collapsed": true,
        "id": "fLPvkJt2ot30",
        "outputId": "dac6f3ae-67cf-49f1-8132-ecd33346f476"
      },
      "source": [
        "# making groups for box plot\n",
        "gendergroup1 = df_demog_ds[df_demog_ds['GenderSelect']=='Male']['Age']\n",
        "gendergroup2 = df_demog_ds[df_demog_ds['GenderSelect']=='Female']['Age']\n",
        "gendergroup3 = df_demog_ds[df_demog_ds['GenderSelect']=='A different identity']['Age']\n",
        "data=[gendergroup1,gendergroup2,gendergroup3]\n",
        "\n",
        "fig1, ax1 = plt.subplots()\n",
        "ax1.set_title('Boxplot of Age with GenderSelect\\n')\n",
        "ax1.set_ylabel('Age')\n",
        "ax1.set_xlabel('\\nGender')\n",
        "\n",
        "boxplot=ax1.boxplot(data, \n",
        "                    notch=True,\n",
        "                    patch_artist=True,\n",
        "                    labels=['Male','Female','A different identity',],\n",
        "                   boxprops=dict(linestyle='--', linewidth=2, color='black'))\n",
        "\n",
        "colors = ['cyan', 'pink', 'lightgreen']\n",
        "for patch, color in zip(boxplot['boxes'], colors):\n",
        "    patch.set_facecolor(color)\n",
        "plt.figure(figsize=(12,8))\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MQb_Obrpot3e"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "You are required to use the barchart to show the percentage of men, women and other identity.\n",
        "    \n",
        "    \n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.3.B** In your report's section '1.3.B', include the bar chart generated from your code.\n",
        "</div>\n",
        "    \n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "collapsed": true,
        "id": "H0tU0cJLot3h",
        "outputId": "dcd0fa35-7839-4d84-c472-4f3d79721bf8"
      },
      "source": [
        "plt.title('Gender Distribution')\n",
        "plt.xlabel('Type of Gender')\n",
        "plt.ylabel('Percentage')\n",
        "df_demog_ds['GenderSelect'].value_counts(normalize=True).mul(100).plot(kind='bar')\n",
        "plt.figure(figsize=(5,5))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ohxh7aPWot4G"
      },
      "source": [
        "#### 1.3.3 Country\n",
        "<a id=\"country\"></a>\n",
        "The data scientists are working all over the world. The United States is regarded the largest data science community. India, China and some other countries are also having a fast growing recently. Is this true? Let's find out."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gcW1HPZlot4J"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "Find the top 5 countries of data scientists.\n",
        "    \n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.3.C** In your report's section '1.3.C', answer what are those top 5 countries and their corresponding number of data scienists\n",
        "</div>\n",
        "    \n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "collapsed": true,
        "id": "e14ly826ot4L",
        "outputId": "4b766db4-8f1b-490a-9c4a-5a361bd7071a"
      },
      "source": [
        "# Your Code: create and fill value into df_country\n",
        "df_country=df_demog_ds.groupby('Country').size().nlargest(5)\n",
        "print('The top five countries and their corresponding number of data scientists: \\n')\n",
        "print(df_demog_ds.groupby('Country').size().nlargest(5))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The top five countries and their corresponding number of data scientists: \n",
            "\n",
            "Country\n",
            "United States     414\n",
            "India             111\n",
            "France             60\n",
            "United Kingdom     55\n",
            "Germany            50\n",
            "dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "_cell_guid": "f3da614f-96e2-45d1-ba78-9d08a58fa136",
        "_kg_hide-input": true,
        "_uuid": "34afcf67184929a6de8358a13a961d0b9ad25b6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "collapsed": true,
        "id": "4NfzLajkot4X",
        "outputId": "5eaf1aee-0581-4b25-b26f-a61ae5d7c53c"
      },
      "source": [
        "# Show bargraph of top 5 countries\n",
        "plt.title(\"Top 5 number of Data Scientists \")\n",
        "df_demog_ds.groupby('Country').size().nlargest(5).plot(kind='bar',color='blue',figsize=(12,6))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x1858a13ee88>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 261
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t8LLns9IJykS"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "Generate the distribution of top 5 countries of data scientists, using percentage barchart. You can not mannually input the name of top 5 countries (your code should not contain any name of the top 5 countries), and you are required to use python subset functions or many other functions.\n",
        "    \n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.3.D** In your report's section '1.3.D', including the percentage barchart of those top 5 countries.\n",
        "</div>\n",
        "    \n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "collapsed": true,
        "id": "M1g1CA3_ot4l",
        "outputId": "af7a5eef-7396-459e-ecf8-69d9f9f6ea6c"
      },
      "source": [
        "# ( this method is very length but i learnt how to use bokeh function and showing percentage graph like this )\n",
        "df_country_top5=df_demog_ds.groupby('Country').size().nlargest(5)\n",
        "fig, ax = plt.subplots()\n",
        "# Calculating percentages using top 5 countries result stored in df_country_top5  \n",
        "start = 0\n",
        "US = round((df_country_top5[0]/df_country_top5.sum())*100)\n",
        "IND = round((df_country_top5[1]/df_country_top5.sum())*100)\n",
        "FR = round((df_country_top5[2]/df_country_top5.sum())*100)\n",
        "UK = round((df_country_top5[3]/df_country_top5.sum())*100)\n",
        "GR= round((df_country_top5[4]/df_country_top5.sum())*100)\n",
        "\n",
        "# using the broken_barh function  and giving its parameters.\n",
        "ax.broken_barh([(start, US), (US, US+IND), (US+IND, US+IND+FR),(US+IND+FR,US+IND+FR+UK),(US+IND+FR+UK,US+IND+FR+UK+GR)], [10, 9], facecolors=('#6259D8', '#E53F08', '#FDB200','#3FDB1B','#E0C7CF'))\n",
        "ax.set_ylim(5, 15)\n",
        "ax.set_xlim(0, 100)\n",
        "ax.spines['left'].set_visible(False)\n",
        "ax.spines['bottom'].set_visible(False)\n",
        "ax.spines['top'].set_visible(False)\n",
        "ax.spines['right'].set_visible(False)\n",
        "ax.set_yticks([15, 25])\n",
        "ax.set_xticks([0, 25, 50, 75, 100])\n",
        "\n",
        "ax.set_axisbelow(True) \n",
        "\n",
        "ax.set_yticklabels(['Countries'])\n",
        "ax.grid(axis='x')\n",
        "ax.text(US-10, 14.5, str(US)+'%',fontsize=9)\n",
        "ax.text((US+IND)-10, 14.5, str(IND)+'%',fontsize=9)\n",
        "ax.text((US+IND+FR)-7, 14.5, str(FR)+'%',fontsize=9)\n",
        "ax.text((US+IND+FR+UK)-5, 14.5, str(UK)+'%',fontsize=9)\n",
        "ax.text((US+IND+FR+UK+GR)-5, 14.5,str(GR)+'%',fontsize=9)\n",
        "\n",
        "fig.suptitle('Percentage Distribution of top 5 countries of Data Scientists',fontsize=16)\n",
        "\n",
        "#to plot labels on the graph.\n",
        "leg1 = mpatches.Patch(color='#6259D8', label='US')\n",
        "leg2 = mpatches.Patch(color='#E53F08', label='IND')\n",
        "leg3 = mpatches.Patch(color='#FDB200', label='FR')\n",
        "leg4 = mpatches.Patch(color='#3FDB1B', label='UK')\n",
        "leg5 = mpatches.Patch(color='#E0C7CF', label='GR')\n",
        "\n",
        "ax.legend(handles=[leg1, leg2, leg3,leg4,leg5], ncol=5)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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uTZtszIyv4ceeojrr7+e/Px8hg0bxjXXXEPv3r35xz/+Qd++fcnPz+f000/n4YcfJisrvWVs0r7zbjO/q666avvTupUuvfRSDjzwQPr06cOsWbN47bXXyM3N3dViJtY0vXWRrvmdc845vP766yxdujQt86vUPqtjRuZ3zz33JGzvsSZOnEj37t05/fTTa7w6U1tNctL7tnAq8zMzpk6dysyZM7ffPjrjjDMShnV9bW8Ba2z343YnM2bMcEOHDm3QZS5cuLDRXprV36dOH9Vleqk+6y5Jn6U/5ZYinYmLiIhElEJcREQkohTijZBukYhIFKiv2nUK8UamWbNmrF27VjuHiOzWKv8/8WbNmmW6KJGm/wClkenWrRvLli3b/q5mY1JUVKQdPk1Ul+ml+qybZs2a0a1bt0wXI9IU4o1MTk4OPXv2zHQx6sWMGTMYMGBApovRKKgu00v1KZmiy+kiIiIRpRAXERGJKIW4iIhIRCnERUREIkohLiIiElEKcRERkYhSiIuIiESUQlxERCSiFOIiIiIRpRAXERGJKIW4iIhIRCnERUREIkohLiIiElEKcRERkYhSiIuIiESUQlxERCSiFOIiIiIRpRAXERGJKIW4iIhIRCnERUREIkohLiIiElEKcRERkYhSiIuIiESUQlxERCSiFOIiIiIRpRAXERGJKIW4iIhIRCnERUREIkohLiIiElEKcRERkYhSiIuIiESUQlxERCSiFOIiIiIRpRAXERGJKIW4iIhIRCnERUREIkohLiIiElEKcRERkYhSiIuIiESUQlxERCSiFOIiIiIRZc65TJeh0frlqYtUuSLVuG5FfqaLkHZ5lxRlZLnDvtW1wZb14NfT6nX++wzKt3pdQCOiM3EREZGIUoiLiIhElEJcREQkohTiIiIiEaUQFxERiSiFuIiISEQpxEVERCJKIS4iIhJRCnEREZGIUoiLiIhElEJcREQkohTiIiIiEaUQFxERiSiFuIiISEQpxEVERCJKIS4iIhJRCnEREZGIUoiLiIhElEJcREQkohTiIiIiEaUQFxERiSiFuIiISEQpxEVERCJKIS4iIhJRCnEREZGIUoiLiIhElEJcREQkohTiIiIiEaUQFxERiSiFuIiISEQpxEVERCJKIS4iIhJRCnEREZGIUoiLiIhElEJcREQkohTiIiIiEaUQFxERiSiFuIiI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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "zj7aUCHaOWK5",
        "outputId": "2317c7e1-80c9-4be4-c6b2-7c06b431d1bb"
      },
      "source": [
        "Report_Task=df_demog_ds['Country'].value_counts(normalize=True).mul(100)\n",
        "Report_Task.nlargest(5).plot(kind='bar',color='blue')\n",
        "plt.title('Percentage Distribution of top 5 Countries of Data Scientists')\n",
        "plt.xlabel(' Countries')\n",
        "plt.ylabel('Percentage')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Percentage')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rQNCS52Aot40"
      },
      "source": [
        "Now we have some understanding about the country, let's see if there is any relationship between country, age and gender.\n",
        "\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "You are required to output the mean and median age for each gender for the United States, India, Australia, Pakistan\n",
        "\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **1.3.E** In your report's section '1.3.E', including the results of above coding task.\n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 325
        },
        "collapsed": true,
        "id": "C8x3hi3xot45",
        "outputId": "dc0ce279-87ba-4670-d9e1-38726f0f854e"
      },
      "source": [
        "# calculating mean and median for United States\n",
        "print('\\033[1m' + 'Mean And Median For United States: ')\n",
        "print ('\\033[0m')\n",
        "usa_male=df_demog_ds.loc[(df_demog_ds['Country'] == 'United States') & (df_demog_ds['GenderSelect'] == 'Male')]\n",
        "usa_mean=usa_male['Age'].mean()\n",
        "usa_median=usa_male['Age'].median()\n",
        "print('The mean age of Male Data Scientist is: '+ str(usa_mean)+' and the median is: '+str(usa_median))\n",
        "\n",
        "usa_female=df_demog_ds.loc[(df_demog_ds['Country'] == 'United States') & (df_demog_ds['GenderSelect'] == 'Female')]\n",
        "usa_mean_f=usa_female['Age'].mean()\n",
        "usa_median_f=usa_female['Age'].median()\n",
        "print('The mean age of Female Data Scientist is: '+ str(usa_mean_f)+' and the median is: '+str(usa_median_f))\n",
        "\n",
        "usa_differentgender=df_demog_ds.loc[(df_demog_ds['Country'] == 'United States') & (df_demog_ds['GenderSelect'] == 'A different identity')]\n",
        "usa_mean_d=usa_differentgender['Age'].mean()\n",
        "usa_median_d=usa_differentgender['Age'].median()\n",
        "print('The mean age of Different Gender Data Scientist is: '+ str(usa_mean_d)+' and the median is: '+str(usa_median_d)+'\\n')\n",
        "\n",
        "# calculating mean and median for India\n",
        "print('\\033[1m' + 'Mean And Median For India: ')\n",
        "print ('\\033[0m')\n",
        "india_male=df_demog_ds.loc[(df_demog_ds['Country'] == 'India') & (df_demog_ds['GenderSelect'] == 'Male')]\n",
        "india_mean=india_male['Age'].mean()\n",
        "india_median=india_male['Age'].median()\n",
        "print('The mean age of Male Data Scientist in India is: '+ str(india_mean)+' and the median is: '+str(india_median))\n",
        "\n",
        "india_female=df_demog_ds.loc[(df_demog_ds['Country'] == 'India') & (df_demog_ds['GenderSelect'] == 'Female')]\n",
        "india_mean_f=india_female['Age'].mean()\n",
        "india_median_f=india_female['Age'].median()\n",
        "print('The mean age of Female Data Scientist in India is: '+ str(india_mean_f)+' and the median is: '+str(india_median_f))\n",
        "\n",
        "india_differentgender=df_demog_ds.loc[(df_demog_ds['Country'] == 'India') & (df_demog_ds['GenderSelect'] == 'A different identity')]\n",
        "india_mean_d=india_differentgender['Age'].mean()\n",
        "india_median_d=india_differentgender['Age'].median()\n",
        "print('The mean age of Different Gender Data Scientist is: '+ str(india_mean_d)+' and the median is: '+str(india_median_d)+'\\n')\n",
        "\n",
        "# calculating mean and median for Australia\n",
        "print('\\033[1m' + 'Mean And Median For Australia: ')\n",
        "print ('\\033[0m')\n",
        "australia_male=df_demog_ds.loc[(df_demog_ds['Country'] == 'Australia') & (df_demog_ds['GenderSelect'] == 'Male')]\n",
        "australia_mean=australia_male['Age'].mean()\n",
        "australia_median=australia_male['Age'].median()\n",
        "print('The mean age of Male Data Scientist in Australia is: '+ str(australia_mean)+' and the median is: '+str(australia_median))\n",
        "\n",
        "australia_female=df_demog_ds.loc[(df_demog_ds['Country'] == 'Australia') & (df_demog_ds['GenderSelect'] == 'Female')]\n",
        "australia_mean_f=australia_female['Age'].mean()\n",
        "australia_median_f=australia_female['Age'].median()\n",
        "print('The mean age of Female Data Scientist in Australia is: '+ str(australia_mean_f)+' and the median is: '+str(australia_median_f))\n",
        "\n",
        "australia_differentgender=df_demog_ds.loc[(df_demog_ds['Country'] == 'Australia') & (df_demog_ds['GenderSelect'] == 'A different identity')]\n",
        "australia_mean_d=australia_differentgender['Age'].mean()\n",
        "australia_median_d=australia_differentgender['Age'].median()\n",
        "print('The mean age of Different Gender Data Scientist is: '+ str(australia_mean_d)+' and the median is: '+str(australia_median_d)+'\\n')\n",
        "\n",
        "# calculating mean and median for Pakistan\n",
        "print('\\033[1m' + 'Mean And Median For Pakistan: ')\n",
        "print ('\\033[0m')\n",
        "pakistan_male=df_demog_ds.loc[(df_demog_ds['Country'] == 'Pakistan') & (df_demog_ds['GenderSelect'] == 'Male')]\n",
        "pakistan_mean=pakistan_male['Age'].mean()\n",
        "pakistan_median=pakistan_male['Age'].median()\n",
        "print('The mean age of Male Data Scientist in Pakistan is: '+ str(pakistan_mean)+' and the median is: '+str(pakistan_median))\n",
        "\n",
        "pakistan_female=df_demog_ds.loc[(df_demog_ds['Country'] == 'Pakistan') & (df_demog_ds['GenderSelect'] == 'Female')]\n",
        "pakistan_mean_f=pakistan_female['Age'].mean()\n",
        "pakistan_median_f=pakistan_female['Age'].median()\n",
        "print('The mean age of Female Data Scientist in Pakistan is: '+ str(pakistan_mean_f)+' and the median is: '+str(pakistan_mean_f))\n",
        "\n",
        "pakistan_differentgender=df_demog_ds.loc[(df_demog_ds['Country'] == 'Pakistan') & (df_demog_ds['GenderSelect'] == 'A different identity')]\n",
        "pakistan_mean_d=pakistan_differentgender['Age'].mean()\n",
        "pakistan_median_d=pakistan_differentgender['Age'].median()\n",
        "print('The mean age of Different Gender Data Scientist is: '+ str(pakistan_mean_d)+' and the median is: '+str(pakistan_median_d)+'\\n')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1mMean And Median For United States: \n",
            "\u001b[0m\n",
            "The mean age of Male Data Scientist is: 35.64912280701754 and the median is: 33.0\n",
            "The mean age of Female Data Scientist is: 33.436619718309856 and the median is: 31.0\n",
            "The mean age of Different Gender Data Scientist is: 31.0 and the median is: 31.0\n",
            "\n",
            "\u001b[1mMean And Median For India: \n",
            "\u001b[0m\n",
            "The mean age of Male Data Scientist in India is: 30.019801980198018 and the median is: 28.0\n",
            "The mean age of Female Data Scientist in India is: 29.0 and the median is: 27.0\n",
            "The mean age of Different Gender Data Scientist is: nan and the median is: nan\n",
            "\n",
            "\u001b[1mMean And Median For Australia: \n",
            "\u001b[0m\n",
            "The mean age of Male Data Scientist in Australia is: 35.0 and the median is: 34.0\n",
            "The mean age of Female Data Scientist in Australia is: 32.6 and the median is: 31.0\n",
            "The mean age of Different Gender Data Scientist is: nan and the median is: nan\n",
            "\n",
            "\u001b[1mMean And Median For Pakistan: \n",
            "\u001b[0m\n",
            "The mean age of Male Data Scientist in Pakistan is: 32.0 and the median is: 27.0\n",
            "The mean age of Female Data Scientist in Pakistan is: nan and the median is: nan\n",
            "The mean age of Different Gender Data Scientist is: nan and the median is: nan\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gYQNiE5Cot-I"
      },
      "source": [
        "## Part 2 - Data Science Job Advertising Data\n",
        "\n",
        "In this part, you are required to use the text processing skills to find out the insights in data science job adverising Data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LQmiP5-_Nc3b"
      },
      "source": [
        "### 2.1. Load the data and Extract the high frequency words\n",
        "<a id=\"text\"></a>\n",
        "\n",
        "Firstly, you will need to load the [JobPostings.csv](https://github.com/tulip-lab/sit742/raw/master/Assessment/2020/data/JobPostings.csv) data and sub-set out of the job description from it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "collapsed": true,
        "id": "zH8XAQ0xYGSc",
        "outputId": "6369ff7f-52d3-4a2a-a22d-8b284e76d8de"
      },
      "source": [
        "import re\n",
        "import nltk\n",
        "from nltk.tokenize import RegexpTokenizer\n",
        "from nltk.tokenize import WhitespaceTokenizer as WsT\n",
        "from nltk.probability import *\n",
        "from itertools import chain\n",
        "import codecs\n",
        "from nltk.corpus import stopwords \n",
        "nltk.download('stopwords')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to\n",
            "[nltk_data]     C:\\Users\\Mahad\\AppData\\Roaming\\nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 264
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xm1vdjSKJykj"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "You are required to extract the token and append them into the list 'token'.\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **2.1.A** In your report's section '2.1.A', including your code of this task. You can copy and paster your completed code in the following cell\n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rz03Rd-GYYMw",
        "outputId": "20788915-1398-4098-9bb5-9f17edc94e36"
      },
      "source": [
        "#Reading the job posting file\n",
        "df_text = pd.read_csv('JobPostings.csv')\n",
        "stop_words = set(stopwords.words('english')) \n",
        "tokenizer = RegexpTokenizer(r\"\\w+(?:[-']\\w+)?\") # defining the tokenizer\n",
        "jobdescription=df_text['job_description']\n",
        "raw_data=[]\n",
        "# for loop iterates through job description and appends values into raw_data\n",
        "for val in jobdescription:                      \n",
        "    raw_data.append(val)\n",
        "raw_data=' '.join(raw_data) \n",
        "\n",
        "# this function filters our raw_data by removing the stop words from the data \n",
        "def tokenizerRawData(raw_data):\n",
        "    tokens = tokenizer.tokenize(raw_data)\n",
        "    tokens = [token.lower() for token in tokens]\n",
        "    tokens_filtered = [token for token in tokens if token not in stop_words]\n",
        "    return tokens_filtered\n",
        "\n",
        "print(\"Tokenizer Created\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tokenizer Created\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VD4z8w8xOKDJ"
      },
      "source": [
        "Secondly, \n",
        "\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "You are required to find out the words freqency which is more than 6000 in the job descriptions. (Please use stopwords at beginning)\n",
        "\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **2.1.B** In your report's section '2.1.B', list those words with frequency > 6000.\n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c-Pag_N7Zew-"
      },
      "source": [
        "most_common_words = FreqDist(sorted(tokenizerRawData(raw_data)))\n",
        "results = []\n",
        "for words,frequency in sorted(most_common_words.most_common()):\n",
        "    if frequency > 6000:\n",
        "        results.append((words,frequency))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "collapsed": true,
        "id": "S7JzfU6AaSQi",
        "outputId": "5948118d-956a-4ac2-d47d-d9ac37815910"
      },
      "source": [
        "freq6000=pd.DataFrame(results,columns=['words','frequency'])\n",
        "freq6000"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>words</th>\n",
              "      <th>frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ability</td>\n",
              "      <td>15686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>across</td>\n",
              "      <td>7189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>advanced</td>\n",
              "      <td>10627</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>algorithms</td>\n",
              "      <td>9070</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>analysis</td>\n",
              "      <td>20628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>use</td>\n",
              "      <td>7574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>using</td>\n",
              "      <td>12635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>work</td>\n",
              "      <td>28160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>working</td>\n",
              "      <td>13382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>years</td>\n",
              "      <td>16235</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>93 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         words  frequency\n",
              "0      ability      15686\n",
              "1       across       7189\n",
              "2     advanced      10627\n",
              "3   algorithms       9070\n",
              "4     analysis      20628\n",
              "..         ...        ...\n",
              "88         use       7574\n",
              "89       using      12635\n",
              "90        work      28160\n",
              "91     working      13382\n",
              "92       years      16235\n",
              "\n",
              "[93 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 315
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EK9-BCbDJyky"
      },
      "source": [
        "Then,\n",
        "\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "You are required to sort and display the top 10 high frequency words in 'freq6000'\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **2.1.C** In your report's section '2.1.C', list those top 10 words\n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "collapsed": true,
        "id": "doWvhqRmJykz",
        "outputId": "5411c8b2-23ec-43a6-d41d-20ea9ffcd335"
      },
      "source": [
        "# Your Code to sort and display the top 10 high fequency words in 'freq6000'\n",
        "sorted_results=freq6000.sort_values(by=['frequency'],ascending=False)\n",
        "sorted_results[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>words</th>\n",
              "      <th>frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>data</td>\n",
              "      <td>124649</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>experience</td>\n",
              "      <td>59165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>business</td>\n",
              "      <td>33571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>work</td>\n",
              "      <td>28160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>science</td>\n",
              "      <td>26875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>learning</td>\n",
              "      <td>26867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>analytics</td>\n",
              "      <td>21846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>team</td>\n",
              "      <td>20729</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>analysis</td>\n",
              "      <td>20628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>machine</td>\n",
              "      <td>20485</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         words  frequency\n",
              "15        data     124649\n",
              "25  experience      59165\n",
              "10    business      33571\n",
              "90        work      28160\n",
              "66     science      26875\n",
              "34    learning      26867\n",
              "6    analytics      21846\n",
              "79        team      20729\n",
              "4     analysis      20628\n",
              "35     machine      20485"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 268
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dKT34ULQOWK7"
      },
      "source": [
        "Finally,\n",
        "\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "\n",
        "**Code**: \n",
        "You are required to carry out one more analytics on this data set, and implement it below.\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "    \n",
        "**Report**: \n",
        "    **2.1.D** In your report's section '2.1.D', describe your self-defined text analysis task, and the discovery from your analysis.\n",
        "</div>\n",
        "\n",
        "\n",
        "</div>\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kHggH1UVOWK7"
      },
      "source": [
        "# using text analysis to check difference between popular words between Jobs posted by indeed and all other job boards \n",
        "\n",
        "jobs_indeed=df_text.loc[df_text['job_board']=='indeed']\n",
        "raw_data=[]\n",
        "for val in jobs_Indeed['job_description']:\n",
        "    raw_data.append(val)\n",
        "raw_data=' '.join(raw_data) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f1VYvpY7OWK8",
        "outputId": "78626ca9-350e-48c0-8763-b8f48f9c2997"
      },
      "source": [
        "# this function filters our raw_data by removing the stop words from the data \n",
        "def tokenizerRawData(raw_data):\n",
        "    tokens = tokenizer.tokenize(raw_data)\n",
        "    tokens = [token.lower() for token in tokens]\n",
        "    tokens_filtered = [token for token in tokens if token not in stop_words]\n",
        "    return tokens_filtered\n",
        "\n",
        "print(\"Tokenizer created successfully!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tokenizer created successfully!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AMxIWpJmOWK8"
      },
      "source": [
        "most_common_words = FreqDist(sorted(tokenizerRawData(raw_data)))\n",
        "results_indeed = []\n",
        "for words,frequency in sorted(most_common_words.most_common()):\n",
        "    if frequency > 0:\n",
        "        results_indeed.append((words,frequency))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "ELzFxQGEOWK8",
        "outputId": "3812814a-39d4-4ebd-bfb7-f4e0e5c9a6c9"
      },
      "source": [
        "top_postingwords_indeed=pd.DataFrame(results_Indeed,columns=['words','frequency'])\n",
        "sorted_Indeed=Top_PostingWords_Indeed.sort_values(by=['frequency'],ascending=False)\n",
        "print(\"Most Common words present in job ads posted by Indeed: \")\n",
        "sorted_Indeed[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Most Common words present in job ads posted by Indeed: \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>words</th>\n",
              "      <th>frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6895</th>\n",
              "      <td>data</td>\n",
              "      <td>72685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9324</th>\n",
              "      <td>experience</td>\n",
              "      <td>34512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4200</th>\n",
              "      <td>business</td>\n",
              "      <td>20983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26203</th>\n",
              "      <td>work</td>\n",
              "      <td>16912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21314</th>\n",
              "      <td>science</td>\n",
              "      <td>16292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14022</th>\n",
              "      <td>learning</td>\n",
              "      <td>15270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2388</th>\n",
              "      <td>analytics</td>\n",
              "      <td>13200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23630</th>\n",
              "      <td>team</td>\n",
              "      <td>13043</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2367</th>\n",
              "      <td>analysis</td>\n",
              "      <td>12599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22112</th>\n",
              "      <td>skills</td>\n",
              "      <td>11588</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            words  frequency\n",
              "6895         data      72685\n",
              "9324   experience      34512\n",
              "4200     business      20983\n",
              "26203        work      16912\n",
              "21314     science      16292\n",
              "14022    learning      15270\n",
              "2388    analytics      13200\n",
              "23630        team      13043\n",
              "2367     analysis      12599\n",
              "22112      skills      11588"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 286
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "eehRvdEEOWK9",
        "outputId": "5cc10d74-72d5-422b-ac79-43e005ca2849"
      },
      "source": [
        "# finding most common words in job posted on monster website\n",
        "jobs_monster=df_text.loc[df_text['job_board']=='monster']\n",
        "\n",
        "raw_data=[]\n",
        "for val in jobs_monster['job_description']:\n",
        "    raw_data.append(val)\n",
        "raw_data=' '.join(raw_data) \n",
        "\n",
        "most_common_words = FreqDist(sorted(tokenizerRawData(raw_data)))\n",
        "results_monster = []\n",
        "for words,frequency in sorted(most_common_words.most_common()):\n",
        "    if frequency > 0:\n",
        "        results_monster.append((words,frequency))\n",
        "        \n",
        "top_postingwords_monster=pd.DataFrame(results_monster,columns=['words','frequency'])\n",
        "sorted_monster=top_postingwords_monster.sort_values(by=['frequency'],ascending=False)\n",
        "print(\"Most Common words present in job ads posted by Monster: \")\n",
        "sorted_monster[:10]                "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Most Common words present in job ads posted by Monster: \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>words</th>\n",
              "      <th>frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5399</th>\n",
              "      <td>data</td>\n",
              "      <td>18830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6897</th>\n",
              "      <td>experience</td>\n",
              "      <td>9814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9524</th>\n",
              "      <td>learning</td>\n",
              "      <td>4700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16581</th>\n",
              "      <td>work</td>\n",
              "      <td>4685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3876</th>\n",
              "      <td>business</td>\n",
              "      <td>4602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13798</th>\n",
              "      <td>science</td>\n",
              "      <td>4106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9124</th>\n",
              "      <td>job</td>\n",
              "      <td>4028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13814</th>\n",
              "      <td>scientist</td>\n",
              "      <td>3657</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9852</th>\n",
              "      <td>machine</td>\n",
              "      <td>3402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2720</th>\n",
              "      <td>analytics</td>\n",
              "      <td>3080</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            words  frequency\n",
              "5399         data      18830\n",
              "6897   experience       9814\n",
              "9524     learning       4700\n",
              "16581        work       4685\n",
              "3876     business       4602\n",
              "13798     science       4106\n",
              "9124          job       4028\n",
              "13814   scientist       3657\n",
              "9852      machine       3402\n",
              "2720    analytics       3080"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 289
        }
      ]
    }
  ]
}