{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "colab": {
      "name": "Machine Learning_Ass2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "06bbe_5WGk3v",
        "colab_type": "text"
      },
      "source": [
        "#**SIT 720 - Machine Learning**\n",
        "\n",
        "Lecturer: Chandan Karmakar | karmakar@deakin.edu.au\n",
        "\n",
        "School of Information Technology,\n",
        "<br/>Deakin University, VIC 3125, Australia."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "es6VJF6zGpZi",
        "colab_type": "text"
      },
      "source": [
        "#**Assessment Task 2 (30 marks)**\n",
        "\n",
        "##**Submission Instruction**\n",
        "1.  Student should insert Python code or text responses into the cell followed by the question.\n",
        "\n",
        "2.  For answers regarding discussion or explanation, **maximum five sentences are suggested**.\n",
        "\n",
        "3.  Rename this notebook file appending your student ID. For example, for student ID 1234, the submitted file name should be A2_1234.ipynb.\n",
        "\n",
        "4.  Insert your student ID and name in the following cell."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IeD67KEpG8I6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Student ID: 219367287\n",
        "\n",
        "# Student name: Mahad Rashid"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zkPBiBLqb3l1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sklearn.cluster as skc\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oYFXM_D7HCHb",
        "colab_type": "text"
      },
      "source": [
        "## Part 1: Clustering *(15 marks)*\n",
        "\n",
        "Let's assume you want to design an environment to predict a class/category from a dataset based on specific features of that class. However, all the features are not strong enough or in other words features not that much variance/uniqueness across the classes. So, you have to design a clustering model by answering the following questions:\n",
        "\n",
        "1. Download the attached clustering.csv file. Read the file and separate the class and feature matrix. __(2 marks)__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "crKN9O9jKi4w",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# read and store clustering file\n",
        "clustering_data= pd.read_csv('clustering.csv')\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7sZ6wzOud6Mh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Separating features and Class from the clustering data\n",
        "features= clustering_data.drop('Class',axis=1).values\n",
        "Class= clustering_data['Class'].values\n",
        "\n",
        "# scaling the features using MinMaxScaler\n",
        "feature_scaler= MinMaxScaler()\n",
        "features_scale= feature_scaler.fit_transform(features)\n"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "riw8k347Qx7_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        },
        "outputId": "1e3f8a0e-7f10-4183-87ff-6bb45030194b"
      },
      "source": [
        "print(features_scale)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.44098206 0.50206612 0.5707804  ... 0.48610121 0.18930164 0.34515017]\n",
            " [0.40509915 0.44628099 0.66243194 ... 0.50106914 0.03288302 0.21516494]\n",
            " [0.34938621 0.34710744 0.87931034 ... 0.50392017 0.25145302 0.1506647 ]\n",
            " ...\n",
            " [0.24645892 0.25826446 0.7277677  ... 0.42908054 0.98166664 0.26440177]\n",
            " [0.11803588 0.16528926 0.39927405 ... 0.14682823 0.36834441 0.25849335]\n",
            " [0.16147309 0.19214876 0.54718693 ... 0.24518888 0.63346292 0.26784835]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OeNPzewpQ0er",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "outputId": "9a4d91eb-0d5b-4407-b35c-5ec8fc56a8e7"
      },
      "source": [
        "print(Class)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n",
            " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n",
            " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3CYvoztIKjoq",
        "colab_type": "text"
      },
      "source": [
        "2. Determine the number of clusters from the dataset. Is this same as the actual number of classes in the dataset? __(1 marks)__\n",
        "\n",
        "<!-- Choose the best three features using different selection criteria (ANOVA, Chi-squared) based on the purity score for the k-mean cluster (Euclidean distance matrix). Which one is good and why? __(5 marks)__ -->"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cKJh4ZobRVYY",
        "colab_type": "text"
      },
      "source": [
        "We can determine the number of clusters from the **elbow plot**. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WFia7uNt5POP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "outputId": "c3158bb4-c271-4668-b10a-adb8b6cedb9e"
      },
      "source": [
        "# create a list to store total sqaured distance\n",
        "tsd= []\n",
        "range_k = range(1,8)\n",
        "\n",
        "for k in range_k:\n",
        "    kmeans = skc.KMeans(n_clusters = k)\n",
        "    kmeans = kmeans.fit(features_scale)\n",
        "    tsd.append(kmeans.inertia_)\n",
        "    \n",
        "# Plot the elbow plot\n",
        "plt.plot(range_k,tsd,'-bx')\n",
        "plt.xlabel(\"Number of clusters\")\n",
        "plt.ylabel(\"Sum of Squared distance\")\n",
        "plt.title('The Elbow Method showing the optimal number of Clusters')\n",
        "plt.show()\n",
        "print(tsd)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "[88.98592483911844, 34.81326792694563, 22.024363075666038, 18.702406475435478, 16.177726288489406, 14.491099629780681, 13.072088582903401]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EkCLZR0YJqGK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "167c7d43-0327-4cbf-db9e-6251d3667b08"
      },
      "source": [
        "Dataset_Labels = clustering_data['Class'].unique()\n",
        "print('Number of classes in the dataset:  ',len(Dataset_Labels))"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of classes in the dataset:   3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EUNmJb_DTDTN",
        "colab_type": "text"
      },
      "source": [
        "From the elbow plot we can see that there are 3 clusters in the dataset as the decrease in the sum of sqaured distance becomes very less after number of clusters= 3. This is same as the actual number of classes in the dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lomdzPf33Ga8",
        "colab_type": "text"
      },
      "source": [
        "3. Perform K-Means clustering on the complete dataset and report purity score. __(2 marks)__ "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UaI08RF5KoPK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.cluster import KMeans\n",
        "# performing KMeans with  no of clusters set equal to 3\n",
        "kmns = KMeans(n_clusters = 3,random_state = 5) \n",
        "kmns.fit(features_scale) \n",
        "\n",
        "# storing the centroids and labels\n",
        "centroids= kmns.cluster_centers_\n",
        "labels= kmns.labels_"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mg1jlFtLlpA7",
        "colab_type": "text"
      },
      "source": [
        "The graph below shows the result of K-means clustering. The different color represent each of the cluster. The second graph shows the centroid for each of the three cluster. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qc_oA9tikHw_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "016c8713-300d-4e98-beb3-363bc5b523b4"
      },
      "source": [
        "colors = [\"b.\",\"r.\",\"y.\"]\n",
        "\n",
        "for i in range(len(features_scale)):\n",
        "    print(\"coordinate:\",features_scale[i], \"label:\", labels[i])\n",
        "    plt.plot(features_scale[i,0], features_scale[i,1], colors[labels[i]], markersize = 10)\n",
        "    plt.title(\"Result of K-means Clustering on complete dataset \")\n"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "coordinate: [0.44098206 0.50206612 0.5707804  0.48648649 0.48610121 0.18930164\n",
            " 0.34515017] label: 2\n",
            "coordinate: [0.40509915 0.44628099 0.66243194 0.36880631 0.50106914 0.03288302\n",
            " 0.21516494] label: 2\n",
            "coordinate: [0.34938621 0.34710744 0.87931034 0.22072072 0.50392017 0.25145302\n",
            " 0.1506647 ] label: 2\n",
            "coordinate: [0.3068933  0.3161157  0.79310345 0.2393018  0.53385602 0.19424255\n",
            " 0.14081733] label: 2\n",
            "coordinate: [0.52407932 0.53305785 0.86479129 0.42736486 0.66429081 0.07670104\n",
            " 0.3229936 ] label: 2\n",
            "coordinate: [0.3578848  0.37190083 0.78947368 0.27421171 0.48610121 0.22063738\n",
            " 0.21516494] label: 2\n",
            "coordinate: [0.3871577  0.42975207 0.65154265 0.37387387 0.44832502 0.36678412\n",
            " 0.3446578 ] label: 2\n",
            "coordinate: [0.33238905 0.34917355 0.75317604 0.29335586 0.47897363 0.25158304\n",
            " 0.23682915] label: 2\n",
            "coordinate: [0.57034939 0.63016529 0.60435572 0.64977477 0.59515324 0.16576734\n",
            " 0.66863614] label: 1\n",
            "coordinate: [0.55240793 0.58677686 0.72504537 0.55461712 0.62366358 0.15653565\n",
            " 0.49926145] label: 2\n",
            "coordinate: [0.44098206 0.50413223 0.55807623 0.4588964  0.43620813 0.49121689\n",
            " 0.39143279] label: 2\n",
            "coordinate: [0.32483475 0.36157025 0.64882033 0.30349099 0.40698503 0.12376965\n",
            " 0.23732152] label: 2\n",
            "coordinate: [0.31161473 0.33264463 0.72504537 0.30405405 0.40555952 0.41879364\n",
            " 0.10782866] label: 2\n",
            "coordinate: [0.30122757 0.34090909 0.61524501 0.32657658 0.37491091 0.30827341\n",
            " 0.17380601] label: 2\n",
            "coordinate: [0.29745042 0.33884298 0.60163339 0.32826577 0.34497505 0.28174856\n",
            " 0.1506647 ] label: 2\n",
            "coordinate: [0.37771483 0.38636364 0.82758621 0.2545045  0.50106914 0.44466837\n",
            " 0.12900049] label: 2\n",
            "coordinate: [0.3210576  0.29338843 1.         0.12387387 0.53670706 0.58106333\n",
            " 0.12900049] label: 2\n",
            "coordinate: [0.4815864  0.48347107 0.88656987 0.3536036  0.6300784  0.10842684\n",
            " 0.25947809] label: 2\n",
            "coordinate: [0.38810198 0.37190083 0.97277677 0.1722973  0.595866   0.13027084\n",
            " 0.06400788] label: 2\n",
            "coordinate: [0.20113314 0.23966942 0.54900181 0.18412162 0.29864576 0.4338764\n",
            " 0.19448548] label: 0\n",
            "coordinate: [0.33711048 0.41115702 0.45644283 0.42736486 0.35566643 0.29995189\n",
            " 0.32348597] label: 2\n",
            "coordinate: [0.33238905 0.3822314  0.58166969 0.34966216 0.38346401 0.25002275\n",
            " 0.3446578 ] label: 2\n",
            "coordinate: [0.49952786 0.51446281 0.823049   0.40484234 0.62508909 0.\n",
            " 0.28163466] label: 2\n",
            "coordinate: [0.14069877 0.16942149 0.52903811 0.11261261 0.21810406 0.08450246\n",
            " 0.21762678] label: 0\n",
            "coordinate: [0.41737488 0.48553719 0.52268603 0.50112613 0.4383464  0.13339141\n",
            " 0.23732152] label: 2\n",
            "coordinate: [0.52880076 0.56818182 0.6969147  0.5259009  0.56379187 0.01793028\n",
            " 0.38798621] label: 2\n",
            "coordinate: [0.22946176 0.27892562 0.50816697 0.27927928 0.28225232 0.33908905\n",
            " 0.1506647 ] label: 0\n",
            "coordinate: [0.20302172 0.26033058 0.43829401 0.27927928 0.23235923 0.22609838\n",
            " 0.1723289 ] label: 0\n",
            "coordinate: [0.33238905 0.36570248 0.67059891 0.36148649 0.4212402  0.25860432\n",
            " 0.25553914] label: 2\n",
            "coordinate: [0.2700661  0.33264463 0.47459165 0.34740991 0.31004989 0.35963281\n",
            " 0.28458887] label: 2\n",
            "coordinate: [0.24268178 0.29132231 0.52722323 0.3125     0.24590164 0.01170214\n",
            " 0.26440177] label: 2\n",
            "coordinate: [0.46270066 0.52272727 0.58348457 0.48310811 0.52815396 0.34415998\n",
            " 0.34908912] label: 2\n",
            "coordinate: [0.33050047 0.41322314 0.40653358 0.46058559 0.39629366 0.41021207\n",
            " 0.38404727] label: 2\n",
            "coordinate: [0.31633617 0.36363636 0.58711434 0.38626126 0.37063435 0.17668933\n",
            " 0.24273757] label: 2\n",
            "coordinate: [0.42115203 0.46900826 0.63339383 0.45777027 0.49750535 0.17733945\n",
            " 0.41408173] label: 2\n",
            "coordinate: [0.52219075 0.53512397 0.83393829 0.45608108 0.60940841 0.19567281\n",
            " 0.4549483 ] label: 2\n",
            "coordinate: [0.52974504 0.59090909 0.59255898 0.52195946 0.59444048 0.26757597\n",
            " 0.49630724] label: 2\n",
            "coordinate: [0.6128423  0.61363636 0.90562613 0.52533784 0.75053457 0.28486913\n",
            " 0.4751354 ] label: 1\n",
            "coordinate: [0.39754485 0.43595041 0.67332123 0.42623874 0.46899501 0.30515284\n",
            " 0.38897095] label: 2\n",
            "coordinate: [0.34844193 0.36363636 0.7831216  0.28040541 0.47612259 0.76972786\n",
            " 0.23732152] label: 2\n",
            "coordinate: [0.27856468 0.29752066 0.7168784  0.25281532 0.37491091 0.23689035\n",
            " 0.3244707 ] label: 2\n",
            "coordinate: [0.27478754 0.29752066 0.69963702 0.2545045  0.37633642 0.19294231\n",
            " 0.32348597] label: 2\n",
            "coordinate: [0.24268178 0.23553719 0.84210526 0.13457207 0.40698503 0.22050735\n",
            " 0.12998523] label: 2\n",
            "coordinate: [0.46364495 0.50619835 0.67059891 0.55067568 0.54597292 0.51306089\n",
            " 0.49679961] label: 2\n",
            "coordinate: [0.42681775 0.44008264 0.82123412 0.38288288 0.59301497 0.30723322\n",
            " 0.32545544] label: 2\n",
            "coordinate: [0.30311615 0.33677686 0.64700544 0.26858108 0.37419815 0.10335591\n",
            " 0.21762678] label: 2\n",
            "coordinate: [0.45042493 0.48553719 0.70780399 0.45157658 0.54383464 0.07826132\n",
            " 0.30182176] label: 2\n",
            "coordinate: [0.41548631 0.44421488 0.7277677  0.37781532 0.53243051 0.28512918\n",
            " 0.3229936 ] label: 2\n",
            "coordinate: [0.39660057 0.43595041 0.66969147 0.36373874 0.47113329 0.25210313\n",
            " 0.29148203] label: 2\n",
            "coordinate: [0.40321058 0.46694215 0.5399274  0.43862613 0.44761226 0.17733945\n",
            " 0.40965042] label: 2\n",
            "coordinate: [0.36260623 0.41115702 0.60798548 0.38626126 0.45759088 0.41736338\n",
            " 0.30773018] label: 2\n",
            "coordinate: [0.49008499 0.51652893 0.76406534 0.43637387 0.57305773 0.62774188\n",
            " 0.30379124] label: 2\n",
            "coordinate: [0.36827195 0.45454545 0.41470054 0.45945946 0.3442623  0.43569673\n",
            " 0.43180699] label: 2\n",
            "coordinate: [0.35316336 0.38636364 0.68058076 0.34065315 0.40555952 0.33323798\n",
            " 0.34711965] label: 2\n",
            "coordinate: [0.37110482 0.45247934 0.43194192 0.4740991  0.3442623  0.09308403\n",
            " 0.47661251] label: 2\n",
            "coordinate: [0.41926346 0.48760331 0.52359347 0.45213964 0.41482537 0.15185479\n",
            " 0.45297883] label: 2\n",
            "coordinate: [0.36543909 0.40082645 0.66878403 0.27533784 0.53243051 0.26484547\n",
            " 0.25849335] label: 2\n",
            "coordinate: [0.4088763  0.41735537 0.83938294 0.27308559 0.55737705 0.04900597\n",
            " 0.28015756] label: 2\n",
            "coordinate: [0.4523135  0.48760331 0.70417423 0.42961712 0.56236636 0.16043636\n",
            " 0.34613491] label: 2\n",
            "coordinate: [0.14353163 0.21900826 0.28221416 0.1463964  0.28652887 0.09581453\n",
            " 0.        ] label: 0\n",
            "coordinate: [0.07837583 0.09297521 0.54627949 0.06137387 0.15680684 0.25158304\n",
            " 0.04332841] label: 0\n",
            "coordinate: [0.06043437 0.04545455 0.68874773 0.00168919 0.17747684 0.19554278\n",
            " 0.09059577] label: 0\n",
            "coordinate: [0.16713881 0.16115702 0.76406534 0.09966216 0.29365645 0.31919541\n",
            " 0.04234367] label: 0\n",
            "coordinate: [0.2483475  0.29545455 0.54355717 0.27927928 0.31361368 0.44102771\n",
            " 0.28015756] label: 0\n",
            "coordinate: [0.20679887 0.23966942 0.57622505 0.20439189 0.28225232 0.05342678\n",
            " 0.12949286] label: 2\n",
            "coordinate: [0.21624174 0.22520661 0.72413793 0.13513514 0.34853885 0.20633476\n",
            " 0.04332841] label: 2\n",
            "coordinate: [0.35410765 0.40495868 0.58529946 0.4115991  0.39914469 0.07124004\n",
            " 0.31068439] label: 2\n",
            "coordinate: [0.32294618 0.38842975 0.49364791 0.39977477 0.37633642 0.18878155\n",
            " 0.30182176] label: 2\n",
            "coordinate: [0.35694051 0.40909091 0.58529946 0.37725225 0.37277263 0.09087363\n",
            " 0.38453964] label: 2\n",
            "coordinate: [0.20207743 0.2768595  0.34210526 0.28885135 0.17961511 0.35989286\n",
            " 0.26981782] label: 0\n",
            "coordinate: [0.66477809 0.73760331 0.53720508 0.72747748 0.66357805 0.43049578\n",
            " 0.75873954] label: 1\n",
            "coordinate: [0.59017941 0.67355372 0.49183303 0.61880631 0.60869565 0.50838003\n",
            " 0.66863614] label: 1\n",
            "coordinate: [0.62983947 0.68595041 0.61887477 0.60754505 0.68709907 0.4906968\n",
            " 0.62629247] label: 1\n",
            "coordinate: [0.80453258 0.79545455 0.90744102 0.70664414 0.92658589 0.28226866\n",
            " 0.76809453] label: 1\n",
            "coordinate: [0.58829084 0.64049587 0.63974592 0.6295045  0.61012117 0.42113407\n",
            " 0.65091088] label: 1\n",
            "coordinate: [0.58356941 0.66322314 0.50544465 0.57882883 0.57590877 0.54023586\n",
            " 0.62826194] label: 1\n",
            "coordinate: [0.63550519 0.7231405  0.47005445 0.65596847 0.55096222 0.39772978\n",
            " 0.69079271] label: 1\n",
            "coordinate: [0.95561851 0.99586777 0.61887477 0.94594595 0.84390592 0.4792547\n",
            " 0.95125554] label: 1\n",
            "coordinate: [0.7884797  0.84297521 0.60707804 0.8704955  0.7191732  0.55895929\n",
            " 0.90743476] label: 1\n",
            "coordinate: [0.61661945 0.64876033 0.73593466 0.53547297 0.66714184 0.2721268\n",
            " 0.60413589] label: 1\n",
            "coordinate: [0.56090652 0.6053719  0.67332123 0.54954955 0.59657876 0.61981043\n",
            " 0.67011324] label: 1\n",
            "coordinate: [0.76770538 0.78099174 0.81306715 0.62331081 0.87455453 0.59276548\n",
            " 0.66962088] label: 1\n",
            "coordinate: [0.90745987 0.92561983 0.73774955 0.78040541 0.87954383 0.57313188\n",
            " 0.82127031] label: 1\n",
            "coordinate: [0.84796978 0.8946281  0.63339383 0.83614865 0.81397006 0.09191382\n",
            " 0.86361398] label: 1\n",
            "coordinate: [0.84230406 0.88842975 0.63430127 0.82601351 0.83464006 0.28564927\n",
            " 0.82028557] label: 1\n",
            "coordinate: [0.72521246 0.76033058 0.71597096 0.71734234 0.7277263  0.21816692\n",
            " 0.82619399] label: 1\n",
            "coordinate: [0.78281398 0.79545455 0.80580762 0.66722973 0.808268   0.11492803\n",
            " 0.78286558] label: 1\n",
            "coordinate: [0.79225685 0.87809917 0.46188748 0.92905405 0.74126871 0.38043662\n",
            " 0.97439685] label: 1\n",
            "coordinate: [1.         0.99173554 0.82395644 0.94256757 1.         0.65205633\n",
            " 0.84293452] label: 1\n",
            "coordinate: [0.97167139 0.95867769 0.86206897 0.87331081 0.99928724 0.55271815\n",
            " 0.88724766] label: 1\n",
            "coordinate: [0.898017   0.94628099 0.60344828 0.94707207 0.82323592 0.15471531\n",
            " 0.9502708 ] label: 1\n",
            "coordinate: [0.77148253 0.78305785 0.81941924 0.71677928 0.83107627 0.30619303\n",
            " 0.75529296] label: 1\n",
            "coordinate: [0.77620397 0.80165289 0.74863884 0.77308559 0.75766215 0.32140582\n",
            " 0.75529296] label: 1\n",
            "coordinate: [0.75542965 0.75206612 0.8938294  0.64076577 0.8766928  0.68079158\n",
            " 0.66863614] label: 1\n",
            "coordinate: [0.73371105 0.84917355 0.33666062 0.99493243 0.60940841 0.54192617\n",
            " 0.94977843] label: 1\n",
            "coordinate: [0.59301228 0.66942149 0.51451906 0.6981982  0.59372773 0.38108674\n",
            " 0.71294929] label: 1\n",
            "coordinate: [0.82341832 0.86363636 0.66606171 0.81193694 0.84105488 0.35261153\n",
            " 0.84638109] label: 1\n",
            "coordinate: [0.79225685 0.85950413 0.54990926 0.87274775 0.65716322 0.17928981\n",
            " 0.95224028] label: 1\n",
            "coordinate: [0.71576959 0.79545455 0.50453721 0.77252252 0.62865289 0.27147668\n",
            " 0.86361398] label: 1\n",
            "coordinate: [0.76770538 0.81198347 0.6615245  0.74324324 0.75124733 0.18501086\n",
            " 0.77695716] label: 1\n",
            "coordinate: [0.54957507 0.58677686 0.7123412  0.46114865 0.63791875 0.44882914\n",
            " 0.54111275] label: 2\n",
            "coordinate: [0.69877243 0.71280992 0.82667877 0.5579955  0.75837491 0.169408\n",
            " 0.64894141] label: 1\n",
            "coordinate: [0.83758263 0.84504132 0.82032668 0.68355856 0.89950107 0.4606613\n",
            " 0.73362875] label: 1\n",
            "coordinate: [0.81114259 0.87190083 0.57713249 0.8277027  0.74910905 0.33700867\n",
            " 0.84194978] label: 1\n",
            "coordinate: [0.78942398 0.8285124  0.67876588 0.75957207 0.80185317 0.33843893\n",
            " 0.80206795] label: 1\n",
            "coordinate: [0.77809254 0.80165289 0.75862069 0.64076577 0.82394868 0.23246954\n",
            " 0.66962088] label: 1\n",
            "coordinate: [0.77998111 0.7768595  0.88475499 0.70551802 0.83820385 0.27017644\n",
            " 0.8276711 ] label: 1\n",
            "coordinate: [0.66477809 0.71280992 0.65245009 0.63851351 0.67213115 0.38771795\n",
            " 0.69423929] label: 1\n",
            "coordinate: [0.8829084  0.93181818 0.60889292 1.         0.80755524 0.32335617\n",
            " 1.        ] label: 1\n",
            "coordinate: [0.7516525  0.78719008 0.71143376 0.70608108 0.74411974 0.12650015\n",
            " 0.6770064 ] label: 1\n",
            "coordinate: [0.74220963 0.76652893 0.76225045 0.68018018 0.81183179 0.19112198\n",
            " 0.62776957] label: 1\n",
            "coordinate: [0.83002833 0.89049587 0.57622505 0.79054054 0.82751247 0.37874631\n",
            " 0.71196455] label: 1\n",
            "coordinate: [0.80642115 0.80578512 0.86569873 0.72297297 0.90662865 0.17473898\n",
            " 0.69177745] label: 1\n",
            "coordinate: [0.80736544 0.8677686  0.58166969 0.76576577 0.78902352 0.76933779\n",
            " 0.75529296] label: 1\n",
            "coordinate: [0.98016997 1.         0.70598911 0.93693694 0.97006415 0.50864008\n",
            " 0.88478582] label: 1\n",
            "coordinate: [0.79981114 0.83471074 0.70145191 0.85416667 0.77619387 0.19281228\n",
            " 0.80945347] label: 1\n",
            "coordinate: [0.79036827 0.78305785 0.90381125 0.64864865 0.90306486 0.46404192\n",
            " 0.60610537] label: 1\n",
            "coordinate: [0.80830973 0.83471074 0.73411978 0.75788288 0.84461867 0.30151218\n",
            " 0.82028557] label: 1\n",
            "coordinate: [0.78375826 0.7892562  0.84119782 0.74774775 0.81183179 0.37367538\n",
            " 0.71245692] label: 1\n",
            "coordinate: [0.89140699 0.92768595 0.66243194 0.89752252 0.87455453 0.29878168\n",
            " 0.88675529] label: 1\n",
            "coordinate: [0.91123702 0.92975207 0.74047187 0.7972973  0.94939416 0.66778921\n",
            " 0.82176268] label: 1\n",
            "coordinate: [0.71293673 0.76652893 0.62704174 0.65315315 0.66500356 0.37107491\n",
            " 0.73461349] label: 1\n",
            "coordinate: [0.52691218 0.61363636 0.4600726  0.48592342 0.53955809 0.45780078\n",
            " 0.58296406] label: 2\n",
            "coordinate: [0.74032106 0.73553719 0.90381125 0.60867117 0.81325731 0.2885098\n",
            " 0.68242245] label: 1\n",
            "coordinate: [0.50991501 0.51239669 0.89201452 0.26126126 0.67854597 0.33427817\n",
            " 0.30773018] label: 2\n",
            "coordinate: [0.77053824 0.77892562 0.83303085 0.68243243 0.88310763 0.44505845\n",
            " 0.72525849] label: 1\n",
            "coordinate: [0.76109537 0.82644628 0.55989111 0.78040541 0.68709907 0.47145328\n",
            " 0.77941901] label: 1\n",
            "coordinate: [0.69782814 0.7107438  0.82758621 0.60810811 0.7533856  0.1939825\n",
            " 0.68931561] label: 1\n",
            "coordinate: [0.90368272 0.95454545 0.59346642 0.90878378 0.81468282 0.14886424\n",
            " 0.82028557] label: 1\n",
            "coordinate: [0.6572238  0.6714876  0.82577132 0.50225225 0.75552388 0.59822648\n",
            " 0.56228459] label: 1\n",
            "coordinate: [0.72804533 0.71900826 0.93194192 0.60810811 0.80185317 0.2693963\n",
            " 0.71048744] label: 1\n",
            "coordinate: [0.7884797  0.80785124 0.78130672 0.70101351 0.85174626 0.27862799\n",
            " 0.70408666] label: 1\n",
            "coordinate: [0.4523135  0.51446281 0.56715064 0.55461712 0.45473984 0.48068497\n",
            " 0.62826194] label: 2\n",
            "coordinate: [0.52596789 0.60330579 0.51088929 0.53265766 0.54526016 0.4552003\n",
            " 0.62826194] label: 1\n",
            "coordinate: [0.46931067 0.51239669 0.67332123 0.49380631 0.55452602 0.5469971\n",
            " 0.65386509] label: 2\n",
            "coordinate: [0.4523135  0.46487603 0.82486388 0.32545045 0.59515324 0.36860445\n",
            " 0.45297883] label: 2\n",
            "coordinate: [0.63928234 0.69214876 0.63883848 0.70157658 0.67284391 0.35898269\n",
            " 0.71491876] label: 1\n",
            "coordinate: [0.47025496 0.5661157  0.40471869 0.57488739 0.42836778 0.24378161\n",
            " 0.66962088] label: 2\n",
            "coordinate: [0.47308782 0.55785124 0.45281307 0.52533784 0.46756949 0.25483363\n",
            " 0.6070901 ] label: 2\n",
            "coordinate: [0.5325779  0.57231405 0.69782214 0.54786036 0.60014255 0.39057848\n",
            " 0.69079271] label: 1\n",
            "coordinate: [0.23418319 0.31198347 0.36206897 0.32263514 0.25944405 0.590165\n",
            " 0.43131462] label: 0\n",
            "coordinate: [0.25779037 0.3161157  0.48275862 0.36148649 0.31575196 0.81523619\n",
            " 0.4534712 ] label: 0\n",
            "coordinate: [0.25967894 0.31818182 0.48911071 0.2759009  0.31646472 0.68001144\n",
            " 0.38798621] label: 0\n",
            "coordinate: [0.15391879 0.18801653 0.51814882 0.1829955  0.24019957 0.61161893\n",
            " 0.34564254] label: 0\n",
            "coordinate: [0.11614731 0.20454545 0.17513612 0.23367117 0.10477548 0.48185518\n",
            " 0.3244707 ] label: 0\n",
            "coordinate: [0.0585458  0.14876033 0.07803993 0.21396396 0.04062723 0.70263558\n",
            " 0.37223043] label: 0\n",
            "coordinate: [0.07932011 0.14876033 0.23049002 0.15596847 0.0634355  0.18930164\n",
            " 0.30182176] label: 0\n",
            "coordinate: [0.17941454 0.21694215 0.52359347 0.20720721 0.24019957 0.47535399\n",
            " 0.23781388] label: 0\n",
            "coordinate: [0.19924457 0.26859504 0.37205082 0.27421171 0.2002851  0.32439636\n",
            " 0.39241753] label: 0\n",
            "coordinate: [0.01888574 0.10743802 0.02359347 0.23536036 0.01282965 0.61070876\n",
            " 0.3323486 ] label: 0\n",
            "coordinate: [0.1170916  0.16942149 0.37658802 0.20495495 0.14967926 0.57599241\n",
            " 0.38798621] label: 0\n",
            "coordinate: [0.13408876 0.22933884 0.15245009 0.28490991 0.10406272 0.80964517\n",
            " 0.36976859] label: 0\n",
            "coordinate: [0.15769594 0.24586777 0.22867514 0.2865991  0.14468995 0.51891196\n",
            " 0.41408173] label: 0\n",
            "coordinate: [0.05571294 0.13016529 0.16787659 0.18074324 0.04490378 0.33375808\n",
            " 0.23732152] label: 0\n",
            "coordinate: [0.0727101  0.1322314  0.27313975 0.15540541 0.0890948  0.42685511\n",
            " 0.36632201] label: 0\n",
            "coordinate: [0.05665722 0.1322314  0.15607985 0.19763514 0.03207413 0.65634711\n",
            " 0.3446578 ] label: 0\n",
            "coordinate: [0.07082153 0.09504132 0.46733212 0.08671171 0.15609408 0.33570843\n",
            " 0.23830625] label: 0\n",
            "coordinate: [0.14542021 0.27272727 0.         0.27871622 0.08196721 0.5278836\n",
            " 0.34515017] label: 0\n",
            "coordinate: [0.1095373  0.22933884 0.00090744 0.30686937 0.0342124  0.46976297\n",
            " 0.38946332] label: 0\n",
            "coordinate: [0.08498584 0.16735537 0.16515426 0.22804054 0.04632929 0.601087\n",
            " 0.38946332] label: 0\n",
            "coordinate: [0.18413598 0.26033058 0.31215971 0.31081081 0.17747684 0.30125213\n",
            " 0.47858198] label: 0\n",
            "coordinate: [0.13503305 0.19008264 0.38294011 0.25394144 0.12829651 0.45585042\n",
            " 0.38847858] label: 0\n",
            "coordinate: [0.13786591 0.20661157 0.30399274 0.20720721 0.15466857 0.54907748\n",
            " 0.25947809] label: 0\n",
            "coordinate: [0.18508026 0.23966942 0.43284936 0.24436937 0.24091233 0.47509394\n",
            " 0.32348597] label: 0\n",
            "coordinate: [0.05193579 0.0785124  0.43284936 0.06306306 0.11689237 0.73111079\n",
            " 0.26095519] label: 0\n",
            "coordinate: [0.14258735 0.15289256 0.646098   0.11599099 0.22166785 0.18670117\n",
            " 0.26440177] label: 0\n",
            "coordinate: [0.17469311 0.24380165 0.34573503 0.23648649 0.19030649 0.54075596\n",
            " 0.36976859] label: 0\n",
            "coordinate: [0.14730878 0.21487603 0.32849365 0.29166667 0.14754098 0.37354536\n",
            " 0.40324963] label: 0\n",
            "coordinate: [0.07176582 0.14669421 0.19056261 0.15596847 0.02708482 0.46443199\n",
            " 0.30182176] label: 0\n",
            "coordinate: [0.06137866 0.12190083 0.2522686  0.10754505 0.06058446 0.35833257\n",
            " 0.28015756] label: 0\n",
            "coordinate: [0.04060434 0.12190083 0.09800363 0.23986486 0.05060584 0.77622905\n",
            " 0.31708518] label: 0\n",
            "coordinate: [0.09065156 0.14256198 0.33938294 0.1509009  0.15324305 0.77362857\n",
            " 0.21516494] label: 0\n",
            "coordinate: [0.06421152 0.11570248 0.30671506 0.10641892 0.09479686 0.46079132\n",
            " 0.23682915] label: 0\n",
            "coordinate: [0.07648725 0.13842975 0.26678766 0.13344595 0.09479686 0.62709176\n",
            " 0.28064993] label: 0\n",
            "coordinate: [0.02266289 0.11363636 0.01633394 0.2134009  0.00784034 0.5743021\n",
            " 0.32791728] label: 0\n",
            "coordinate: [0.01983003 0.03305785 0.46188748 0.04617117 0.13613685 0.52112237\n",
            " 0.26784835] label: 0\n",
            "coordinate: [0.06326723 0.12396694 0.24863884 0.1615991  0.05702067 0.59419574\n",
            " 0.28212703] label: 0\n",
            "coordinate: [0.01416431 0.0661157  0.22504537 0.13851351 0.0085531  0.51189068\n",
            " 0.21861152] label: 0\n",
            "coordinate: [0.08404155 0.1322314  0.35571688 0.15822072 0.09123307 0.66453861\n",
            " 0.23781388] label: 0\n",
            "coordinate: [0.1529745  0.21900826 0.33756806 0.25788288 0.18745545 0.11648832\n",
            " 0.3244707 ] label: 0\n",
            "coordinate: [0.07743154 0.11157025 0.43466425 0.10754505 0.10334996 0.54504674\n",
            " 0.1506647 ] label: 0\n",
            "coordinate: [0.17658168 0.20661157 0.56715064 0.18975225 0.27583749 0.54894746\n",
            " 0.30920729] label: 0\n",
            "coordinate: [0.15108593 0.19628099 0.45190563 0.1920045  0.19885959 0.53204436\n",
            " 0.31462334] label: 0\n",
            "coordinate: [0.10009443 0.13636364 0.44827586 0.11768018 0.15680684 0.57781274\n",
            " 0.30329887] label: 0\n",
            "coordinate: [0.21718602 0.28099174 0.41742287 0.33558559 0.28225232 0.70471596\n",
            " 0.39241753] label: 0\n",
            "coordinate: [0.09159585 0.18595041 0.1061706  0.26126126 0.03777619 0.42867545\n",
            " 0.32644018] label: 0\n",
            "coordinate: [0.11520302 0.21487603 0.1061706  0.28941441 0.06129722 0.53737534\n",
            " 0.41014279] label: 0\n",
            "coordinate: [0.03021719 0.08057851 0.26406534 0.10641892 0.03207413 0.44388823\n",
            " 0.21516494] label: 0\n",
            "coordinate: [0.06043437 0.08471074 0.46551724 0.10698198 0.13613685 0.87881782\n",
            " 0.21565731] label: 0\n",
            "coordinate: [0.         0.         0.51451906 0.         0.11190306 0.54738717\n",
            " 0.13540128] label: 0\n",
            "coordinate: [0.03210576 0.08057851 0.28039927 0.08277027 0.06200998 0.60238724\n",
            " 0.25898572] label: 0\n",
            "coordinate: [0.06421152 0.09297521 0.43738657 0.10810811 0.12401996 0.41866362\n",
            " 0.23732152] label: 0\n",
            "coordinate: [0.12086874 0.12603306 0.64791289 0.13119369 0.23022096 0.36821438\n",
            " 0.30182176] label: 0\n",
            "coordinate: [0.0217186  0.08677686 0.15880218 0.15822072 0.         0.53152427\n",
            " 0.28064993] label: 0\n",
            "coordinate: [0.14353163 0.17768595 0.50635209 0.18975225 0.24590164 0.43777711\n",
            " 0.24273757] label: 0\n",
            "coordinate: [0.20868744 0.21900826 0.70689655 0.14695946 0.35352815 0.53412474\n",
            " 0.19448548] label: 0\n",
            "coordinate: [0.20774315 0.23140496 0.63974592 0.1829955  0.30220955 0.61343926\n",
            " 0.21614968] label: 0\n",
            "coordinate: [0.2625118  0.28305785 0.6969147  0.23704955 0.35495367 0.50772991\n",
            " 0.28163466] label: 2\n",
            "coordinate: [0.19169027 0.26033058 0.36297641 0.28772523 0.2002851  0.33037746\n",
            " 0.35056622] label: 0\n",
            "coordinate: [0.20491029 0.20041322 0.80127042 0.09797297 0.37419815 0.26822609\n",
            " 0.15312654] label: 2\n",
            "coordinate: [0.16902738 0.21280992 0.47912886 0.18018018 0.25588026 0.612009\n",
            " 0.25898572] label: 0\n",
            "coordinate: [0.19641171 0.18801653 0.81306715 0.04786036 0.35994298 0.19957352\n",
            " 0.11127523] label: 2\n",
            "coordinate: [0.05571294 0.06404959 0.54355717 0.06193694 0.12829651 0.42724519\n",
            " 0.1521418 ] label: 0\n",
            "coordinate: [0.19924457 0.20661157 0.71960073 0.15990991 0.32858161 1.\n",
            " 0.23682915] label: 0\n",
            "coordinate: [0.1680831  0.21900826 0.44101633 0.17173423 0.23521026 0.41008205\n",
            " 0.23732152] label: 0\n",
            "coordinate: [0.15108593 0.16322314 0.63702359 0.13400901 0.25017819 0.37263519\n",
            " 0.17282127] label: 0\n",
            "coordinate: [0.06043437 0.09710744 0.39019964 0.1356982  0.11760513 0.46287171\n",
            " 0.23830625] label: 0\n",
            "coordinate: [0.24645892 0.25826446 0.7277677  0.18975225 0.42908054 0.98166664\n",
            " 0.26440177] label: 0\n",
            "coordinate: [0.11803588 0.16528926 0.39927405 0.15540541 0.14682823 0.36834441\n",
            " 0.25849335] label: 0\n",
            "coordinate: [0.16147309 0.19214876 0.54718693 0.19369369 0.24518888 0.63346292\n",
            " 0.26784835] label: 0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xw1O805EmefH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d1832c78-2ad0-46f5-a954-13c0003c62fd"
      },
      "source": [
        "from sklearn import metrics\n",
        "# Define a function to calculate purity \n",
        "def calc_purity(y_true, y_pred):\n",
        "    confusion_matrix = metrics.cluster.contingency_matrix(y_true, y_pred)\n",
        "    purity_score= np.sum(np.amax(confusion_matrix, axis=0)) / np.sum(confusion_matrix)\n",
        "    return purity_score\n",
        "\n",
        "print(\"The purity score is: \", calc_purity(Class,labels))"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The purity score is:  0.8904761904761904\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CsImMLOzK1dV",
        "colab_type": "text"
      },
      "source": [
        "4. There are several distance metrics for  K-Means such as euclidean, squared euclidean, Manhattan, Chebyshev, Minkowski. [ __Hints:__ See the pyclustering library for python.]\n",
        "    - Your job is to compare the purity score of k-means clustering for different distance metrics. __(5 marks)__ \n",
        "    - Select the best distance metric and explain why this distance metric is best for the given dataset. __(2 marks)__ "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O6A2Bg3HMkcY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "outputId": "310e8f86-a2ef-4dc5-db95-c2cd1aa5eba8"
      },
      "source": [
        "# installing pyclustering\n",
        "!pip install pyclustering"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pyclustering\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e4/4b/abf4b42963e6a67dfdd85781d63e9fc4b488805aa2bbe5ba57f91a2758e0/pyclustering-0.10.0.1.tar.gz (2.7MB)\n",
            "\u001b[K     |████████████████████████████████| 2.7MB 2.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from pyclustering) (1.4.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from pyclustering) (3.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from pyclustering) (1.18.5)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (from pyclustering) (7.0.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->pyclustering) (1.2.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->pyclustering) (2.4.7)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->pyclustering) (2.8.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib->pyclustering) (0.10.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.1->matplotlib->pyclustering) (1.15.0)\n",
            "Building wheels for collected packages: pyclustering\n",
            "  Building wheel for pyclustering (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyclustering: filename=pyclustering-0.10.0.1-cp36-none-any.whl size=2615590 sha256=422ab525036ac1be5a17040e550fa8eeb37824d34a9e47699cff59ef845275c4\n",
            "  Stored in directory: /root/.cache/pip/wheels/7c/eb/8d/ce15daecf5a50483a8fbaf1d1e3cb2d7bbaeb0ad709af32419\n",
            "Successfully built pyclustering\n",
            "Installing collected packages: pyclustering\n",
            "Successfully installed pyclustering-0.10.0.1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dBNLhGYRKo4a",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from pyclustering.cluster.kmeans import kmeans, kmeans_visualizer\n",
        "from pyclustering.cluster.center_initializer import kmeans_plusplus_initializer\n",
        "from pyclustering.utils.metric import distance_metric,type_metric\n"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "roPC_4Geoxli",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# setting the initial cluster centers for the three clusters\n",
        "initial_centers = kmeans_plusplus_initializer(features_scale, 3).initialize()"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fMiLldI4o5-G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8d83c18e-e0fd-4bb1-881e-a5fd7db1055e"
      },
      "source": [
        "#Euclidean Distance\n",
        "metric_euclidean = distance_metric(type_metric.EUCLIDEAN)\n",
        "# perform K-Means using euclidean distance metric:\n",
        "kmeans_using_euclidean = kmeans(features_scale, initial_centers, metric = metric_euclidean)\n",
        "kmeans_using_euclidean.process()\n",
        "\n",
        "clusters = kmeans_using_euclidean.get_clusters()\n",
        "euclidean_predict_labels = kmeans_using_euclidean.predict(features_scale)\n",
        "\n",
        "# calculate purity score\n",
        "print(calc_purity(Class,euclidean_predict_labels))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8809523809523809\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "luPZ6eewSPdv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f6c74b07-f30f-41c4-8071-59a0f5dee7ae"
      },
      "source": [
        "#Euclidean Sqaured Distance\n",
        "metric_euclidean_squared = distance_metric(type_metric.EUCLIDEAN_SQUARE)\n",
        "# perform K-Means using euclidean_sqaured distance metric:\n",
        "kmeans_using_euclidean_sqaured = kmeans(features_scale, initial_centers, metric = metric_euclidean_squared)\n",
        "kmeans_using_euclidean_sqaured.process()\n",
        "\n",
        "clusters = kmeans_using_euclidean_sqaured.get_clusters()\n",
        "euclidean_sqaure_predict_labels = kmeans_using_euclidean_sqaured.predict(features_scale)\n",
        "\n",
        "# calculate purity score\n",
        "print(calc_purity(Class,euclidean_sqaure_predict_labels))"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8857142857142857\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pS7-6FfCs3Nb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8ee0bc83-b3ae-4679-9f0a-d11b99287104"
      },
      "source": [
        "# Manhattan Distance\n",
        "\n",
        "metric_manhattan = distance_metric(type_metric.MANHATTAN)\n",
        "# perform K-Means using manhattan distance metric:\n",
        "kmeans_using_manhattan = kmeans(features_scale, initial_centers, metric = metric_manhattan)\n",
        "kmeans_using_manhattan.process()\n",
        "\n",
        "clusters = kmeans_using_manhattan.get_clusters()\n",
        "manhattan_predict_labels = kmeans_using_manhattan.predict(features_scale)\n",
        "# calculate purity score\n",
        "print(calc_purity(Class,manhattan_predict_labels))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8809523809523809\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L7pyApbWuOcb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "52a1652e-0f75-4872-8d23-f964df67ff06"
      },
      "source": [
        "#Chebysehv Distance\n",
        "\n",
        "metric_chebyshev = distance_metric(type_metric.CHEBYSHEV)\n",
        "# perform K-Means using Chebysehv distance metric:\n",
        "kmeans_using_chebyshev = kmeans(features_scale, initial_centers, metric = metric_chebyshev)\n",
        "kmeans_using_chebyshev.process()\n",
        "\n",
        "clusters = kmeans_using_chebyshev.get_clusters()\n",
        "chebyshev_predict_labels = kmeans_using_chebyshev.predict(features_scale)\n",
        "# calculate purity score\n",
        "print(calc_purity(Class,chebyshev_predict_labels))\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9333333333333333\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Px9GYaYu_Mn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "82cdd45d-6323-40d9-ddaf-2d5f9e3e1437"
      },
      "source": [
        "#Minkowski Distance\n",
        "\n",
        "metric_minkowski = distance_metric(type_metric.MINKOWSKI, degree = 4)\n",
        "# perform K-Means using Minkowski distance metric:\n",
        "kmeans_using_minkowski = kmeans(features_scale, initial_centers, metric = metric_minkowski)\n",
        "kmeans_using_minkowski.process()\n",
        "\n",
        "clusters = kmeans_using_minkowski.get_clusters()\n",
        "minkowski_predict_labels = kmeans_using_minkowski.predict(features_scale)\n",
        "# calculate purity score\n",
        "print(calc_purity(Class,minkowski_predict_labels))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yNV7KvW-9ghk",
        "colab_type": "text"
      },
      "source": [
        "**Comparison:**\n",
        "Minkowski Distance and sqaured Euclidean Distance metrics have almost same purity score.\n",
        "Also Euclidean and Manhattan metrics have almost same purity score."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zmdWKbzxwJIu",
        "colab_type": "text"
      },
      "source": [
        "**Best Metric:**\n",
        "The best distance metric to be used for the k means clustering is **Chebysehv metric** because its purity score is highest among all of them. This means that the it is better at predicting the class labels for the features."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xsG5SQti4b7E",
        "colab_type": "text"
      },
      "source": [
        "5. Use selection criteria (ANOVA, Chi-squared) to select best three features and use them for K-Means clustering. Based on the purity score which feature set are you going to recommend and why? __(3 marks)__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9JTAJ2RCuJdA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "717d34a3-9d5c-4c09-b2c6-5ab65f1e22e1"
      },
      "source": [
        "from sklearn.feature_selection import SelectKBest\n",
        "from sklearn.feature_selection import f_classif\n",
        "\n",
        "test = SelectKBest(score_func=f_classif, k=3) # selecting three best features\n",
        "fit = test.fit(features, Class)\n",
        "# score summary\n",
        "print(fit.scores_)\n",
        "select_features = fit.transform(features)\n",
        "# Best 3 selected features\n",
        "print(select_features)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[548.18647869 541.57949687  75.86904844 322.18593446 406.30203065\n",
            "  51.88810892 368.95004492]\n",
            "[[15.26  14.84   3.312]\n",
            " [14.88  14.57   3.333]\n",
            " [14.29  14.09   3.337]\n",
            " [13.84  13.94   3.379]\n",
            " [16.14  14.99   3.562]\n",
            " [14.38  14.21   3.312]\n",
            " [14.69  14.49   3.259]\n",
            " [14.11  14.1    3.302]\n",
            " [16.63  15.46   3.465]\n",
            " [16.44  15.25   3.505]\n",
            " [15.26  14.85   3.242]\n",
            " [14.03  14.16   3.201]\n",
            " [13.89  14.02   3.199]\n",
            " [13.78  14.06   3.156]\n",
            " [13.74  14.05   3.114]\n",
            " [14.59  14.28   3.333]\n",
            " [13.99  13.83   3.383]\n",
            " [15.69  14.75   3.514]\n",
            " [14.7   14.21   3.466]\n",
            " [12.72  13.57   3.049]\n",
            " [14.16  14.4    3.129]\n",
            " [14.11  14.26   3.168]\n",
            " [15.88  14.9    3.507]\n",
            " [12.08  13.23   2.936]\n",
            " [15.01  14.76   3.245]\n",
            " [16.19  15.16   3.421]\n",
            " [13.02  13.76   3.026]\n",
            " [12.74  13.67   2.956]\n",
            " [14.11  14.18   3.221]\n",
            " [13.45  14.02   3.065]\n",
            " [13.16  13.82   2.975]\n",
            " [15.49  14.94   3.371]\n",
            " [14.09  14.41   3.186]\n",
            " [13.94  14.17   3.15 ]\n",
            " [15.05  14.68   3.328]\n",
            " [16.12  15.     3.485]\n",
            " [16.2   15.27   3.464]\n",
            " [17.08  15.38   3.683]\n",
            " [14.8   14.52   3.288]\n",
            " [14.28  14.17   3.298]\n",
            " [13.54  13.85   3.156]\n",
            " [13.5   13.85   3.158]\n",
            " [13.16  13.55   3.201]\n",
            " [15.5   14.86   3.396]\n",
            " [15.11  14.54   3.462]\n",
            " [13.8   14.04   3.155]\n",
            " [15.36  14.76   3.393]\n",
            " [14.99  14.56   3.377]\n",
            " [14.79  14.52   3.291]\n",
            " [14.86  14.67   3.258]\n",
            " [14.43  14.4    3.272]\n",
            " [15.78  14.91   3.434]\n",
            " [14.49  14.61   3.113]\n",
            " [14.33  14.28   3.199]\n",
            " [14.52  14.6    3.113]\n",
            " [15.03  14.77   3.212]\n",
            " [14.46  14.35   3.377]\n",
            " [14.92  14.43   3.412]\n",
            " [15.38  14.77   3.419]\n",
            " [12.11  13.47   3.032]\n",
            " [11.42  12.86   2.85 ]\n",
            " [11.23  12.63   2.879]\n",
            " [12.36  13.19   3.042]\n",
            " [13.22  13.84   3.07 ]\n",
            " [12.78  13.57   3.026]\n",
            " [12.88  13.5    3.119]\n",
            " [14.34  14.37   3.19 ]\n",
            " [14.01  14.29   3.158]\n",
            " [14.37  14.39   3.153]\n",
            " [12.73  13.75   2.882]\n",
            " [17.63  15.98   3.561]\n",
            " [16.84  15.67   3.484]\n",
            " [17.26  15.73   3.594]\n",
            " [19.11  16.26   3.93 ]\n",
            " [16.82  15.51   3.486]\n",
            " [16.77  15.62   3.438]\n",
            " [17.32  15.91   3.403]\n",
            " [20.71  17.23   3.814]\n",
            " [18.94  16.49   3.639]\n",
            " [17.12  15.55   3.566]\n",
            " [16.53  15.34   3.467]\n",
            " [18.72  16.19   3.857]\n",
            " [20.2   16.89   3.864]\n",
            " [19.57  16.74   3.772]\n",
            " [19.51  16.71   3.801]\n",
            " [18.27  16.09   3.651]\n",
            " [18.88  16.26   3.764]\n",
            " [18.98  16.66   3.67 ]\n",
            " [21.18  17.21   4.033]\n",
            " [20.88  17.05   4.032]\n",
            " [20.1   16.99   3.785]\n",
            " [18.76  16.2    3.796]\n",
            " [18.81  16.29   3.693]\n",
            " [18.59  16.05   3.86 ]\n",
            " [18.36  16.52   3.485]\n",
            " [16.87  15.65   3.463]\n",
            " [19.31  16.59   3.81 ]\n",
            " [18.98  16.57   3.552]\n",
            " [18.17  16.26   3.512]\n",
            " [18.72  16.34   3.684]\n",
            " [16.41  15.25   3.525]\n",
            " [17.99  15.86   3.694]\n",
            " [19.46  16.5    3.892]\n",
            " [19.18  16.63   3.681]\n",
            " [18.95  16.42   3.755]\n",
            " [18.83  16.29   3.786]\n",
            " [18.85  16.17   3.806]\n",
            " [17.63  15.86   3.573]\n",
            " [19.94  16.92   3.763]\n",
            " [18.55  16.22   3.674]\n",
            " [18.45  16.12   3.769]\n",
            " [19.38  16.72   3.791]\n",
            " [19.13  16.31   3.902]\n",
            " [19.14  16.61   3.737]\n",
            " [20.97  17.25   3.991]\n",
            " [19.06  16.45   3.719]\n",
            " [18.96  16.2    3.897]\n",
            " [19.15  16.45   3.815]\n",
            " [18.89  16.23   3.769]\n",
            " [20.03  16.9    3.857]\n",
            " [20.24  16.91   3.962]\n",
            " [18.14  16.12   3.563]\n",
            " [16.17  15.38   3.387]\n",
            " [18.43  15.97   3.771]\n",
            " [15.99  14.89   3.582]\n",
            " [18.75  16.18   3.869]\n",
            " [18.65  16.41   3.594]\n",
            " [17.98  15.85   3.687]\n",
            " [20.16  17.03   3.773]\n",
            " [17.55  15.66   3.69 ]\n",
            " [18.3   15.89   3.755]\n",
            " [18.94  16.32   3.825]\n",
            " [15.38  14.9    3.268]\n",
            " [16.16  15.33   3.395]\n",
            " [15.56  14.89   3.408]\n",
            " [15.38  14.66   3.465]\n",
            " [17.36  15.76   3.574]\n",
            " [15.57  15.15   3.231]\n",
            " [15.6   15.11   3.286]\n",
            " [16.23  15.18   3.472]\n",
            " [13.07  13.92   2.994]\n",
            " [13.32  13.94   3.073]\n",
            " [13.34  13.95   3.074]\n",
            " [12.22  13.32   2.967]\n",
            " [11.82  13.4    2.777]\n",
            " [11.21  13.13   2.687]\n",
            " [11.43  13.13   2.719]\n",
            " [12.49  13.46   2.967]\n",
            " [12.7   13.71   2.911]\n",
            " [10.79  12.93   2.648]\n",
            " [11.83  13.23   2.84 ]\n",
            " [12.01  13.52   2.776]\n",
            " [12.26  13.6    2.833]\n",
            " [11.18  13.04   2.693]\n",
            " [11.36  13.05   2.755]\n",
            " [11.19  13.05   2.675]\n",
            " [11.34  12.87   2.849]\n",
            " [12.13  13.73   2.745]\n",
            " [11.75  13.52   2.678]\n",
            " [11.49  13.22   2.695]\n",
            " [12.54  13.67   2.879]\n",
            " [12.02  13.33   2.81 ]\n",
            " [12.05  13.41   2.847]\n",
            " [12.55  13.57   2.968]\n",
            " [11.14  12.79   2.794]\n",
            " [12.1   13.15   2.941]\n",
            " [12.44  13.59   2.897]\n",
            " [12.15  13.45   2.837]\n",
            " [11.35  13.12   2.668]\n",
            " [11.24  13.     2.715]\n",
            " [11.02  13.     2.701]\n",
            " [11.55  13.1    2.845]\n",
            " [11.27  12.97   2.763]\n",
            " [11.4   13.08   2.763]\n",
            " [10.83  12.96   2.641]\n",
            " [10.8   12.57   2.821]\n",
            " [11.26  13.01   2.71 ]\n",
            " [10.74  12.73   2.642]\n",
            " [11.48  13.05   2.758]\n",
            " [12.21  13.47   2.893]\n",
            " [11.41  12.95   2.775]\n",
            " [12.46  13.41   3.017]\n",
            " [12.19  13.36   2.909]\n",
            " [11.65  13.07   2.85 ]\n",
            " [12.89  13.77   3.026]\n",
            " [11.56  13.31   2.683]\n",
            " [11.81  13.45   2.716]\n",
            " [10.91  12.8    2.675]\n",
            " [11.23  12.82   2.821]\n",
            " [10.59  12.41   2.787]\n",
            " [10.93  12.8    2.717]\n",
            " [11.27  12.86   2.804]\n",
            " [11.87  13.02   2.953]\n",
            " [10.82  12.83   2.63 ]\n",
            " [12.11  13.27   2.975]\n",
            " [12.8   13.47   3.126]\n",
            " [12.79  13.53   3.054]\n",
            " [13.37  13.78   3.128]\n",
            " [12.62  13.67   2.911]\n",
            " [12.76  13.38   3.155]\n",
            " [12.38  13.44   2.989]\n",
            " [12.67  13.32   3.135]\n",
            " [11.18  12.72   2.81 ]\n",
            " [12.7   13.41   3.091]\n",
            " [12.37  13.47   2.96 ]\n",
            " [12.19  13.2    2.981]\n",
            " [11.23  12.88   2.795]\n",
            " [13.2   13.66   3.232]\n",
            " [11.84  13.21   2.836]\n",
            " [12.3   13.34   2.974]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9lCTzujBKpL4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "063b1c5c-3d55-4621-fbfe-64b7eb61a7c2"
      },
      "source": [
        "# using ANOVA and then perform K means clustering\n",
        "\n",
        "# Scaling the best 3 features\n",
        "select_features_scale = feature_scaler.fit_transform(select_features)\n",
        "# we want to find 3 clusters so n_clusters=3 and to initialize the centroids before clustering we pass the random state paramter\n",
        "kmeans_anova = KMeans(n_clusters = 3,random_state=5) \n",
        "kmeans_anova.fit(select_features_scale) \n",
        "\n",
        "\n",
        "#getting the cetroids and labels from the performed k-means using Anova\n",
        "centroids_anova = kmeans_anova.cluster_centers_\n",
        "labels_anova    = kmeans_anova.labels_\n",
        "\n",
        "print(calc_purity(Class,labels_anova))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8476190476190476\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iigNOX_oBBTY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "outputId": "ab905916-4148-4913-e785-c454604e2fa2"
      },
      "source": [
        "from sklearn.feature_selection import chi2\n",
        "# finding the chi value for each feature\n",
        "chi_score = chi2(features,Class)\n",
        "chi_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([1.00248555e+02, 2.05548398e+01, 5.66698384e-02, 5.51696494e+00,\n",
              "        7.29271460e+00, 4.26393825e+01, 7.29000995e+00]),\n",
              " array([1.70334569e-22, 3.44011725e-05, 9.72062750e-01, 6.33878884e-02,\n",
              "        2.60859793e-02, 5.50776926e-10, 2.61212799e-02]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5qSH-xm_CnJd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "outputId": "c5b728ed-63a1-4897-986a-f4aac83a8058"
      },
      "source": [
        "#using the P values calculated  in the variable chi_score\n",
        "X2 = clustering_data.drop('Class', axis = 1)\n",
        "p_values = pd.Series(chi_score[1],index = X2.columns)\n",
        "p_values.plot.bar()\n",
        "print(p_values)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "height      1.703346e-22\n",
            "length      3.440117e-05\n",
            "width       9.720627e-01\n",
            "std         6.338789e-02\n",
            "min         2.608598e-02\n",
            "max         5.507769e-10\n",
            "kurtosis    2.612128e-02\n",
            "dtype: float64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MEHwYSB1Dkzb",
        "colab_type": "text"
      },
      "source": [
        "**Answer 1:** As the p value for width, std, kurtosis, min is greater than the P value this means that all these features donot have a significant impact on the response variable as compared to remaining variables.Therfore length, max and height are the three best features. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e5DjjYm0EEG8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Seperating the best features from the dataset\n",
        "best_features = X2[['max','length','height']].values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1gZqu18QEoip",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "470085c4-e5b0-4e80-a741-bd4cba3f1d82"
      },
      "source": [
        "# Performing Chi-sqaure and then  K-means clustering using the best features \n",
        "# Scaling\n",
        "best_features_scale= feature_scaler.fit_transform(best_features)\n",
        "\n",
        "kmns_chisqr = KMeans(n_clusters = 3,random_state = 5) \n",
        "kmns_chisqr.fit(best_features_scale) \n",
        "\n",
        "\n",
        "chisqr_centroids = kmns_chisqr.cluster_centers_\n",
        "labels_chisqr    = kmns_chisqr.labels_\n",
        "# finding the purity scores\n",
        "print(calc_purity(Class,labels_chisqr))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9142857142857143\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oilYhLb88Spg",
        "colab_type": "text"
      },
      "source": [
        "**Comparison**: \n",
        "Chi-sqaure has higher purity score as compared to Anova therefore I will recommend the Chisqaure feature set over Anova feature set."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Key1p4RKLEW9",
        "colab_type": "text"
      },
      "source": [
        "# Part-2 (Dimensionality Reduction using PCA/SVD) *(15 marks)*\n",
        "\n",
        "1. For the dataset (clustering.csv), perform PCA.\n",
        "    - plot the captured variance with respect to increasing latent dimensionality. __(2.5 marks)__\n",
        "  \n",
        "  What is the minimum dimension that captures:\n",
        "    - at least 89% variance? __(1.5 marks)__\n",
        "    - at least 99% variance? __(1 marks)__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zpyk6c6itGl7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "outputId": "327753af-1ee7-45d2-d9ca-f712134d1e83"
      },
      "source": [
        "#normalization \n",
        "from sklearn.preprocessing import scale\n",
        "Xnorm = scale(features)\n",
        "print(Xnorm)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1.42097769e-01  2.15462437e-01  6.06017918e-05 ... -9.86151745e-01\n",
            "  -3.83577423e-01 -1.22474487e+00]\n",
            " [ 1.11880257e-02  8.22375713e-03  4.28515270e-01 ... -1.78816620e+00\n",
            "  -9.22013487e-01 -1.22474487e+00]\n",
            " [-1.92066576e-01 -3.60200562e-01  1.44238325e+00 ... -6.67479334e-01\n",
            "  -1.18919199e+00 -1.22474487e+00]\n",
            " ...\n",
            " [-5.67570840e-01 -6.90247348e-01  7.33948301e-01 ...  3.07658816e+00\n",
            "  -7.18060432e-01  1.22474487e+00]\n",
            " [-1.03608992e+00 -1.03564515e+00 -8.01701104e-01 ... -6.81351965e-02\n",
            "  -7.42534799e-01  1.22474487e+00]\n",
            " [-8.77620233e-01 -9.35863561e-01 -1.10234659e-01 ...  1.29122264e+00\n",
            "  -7.03783718e-01  1.22474487e+00]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ABFiKQ8bxTzb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "f1909f2b-fa8b-4ba3-e48e-2e1eb5e7be69"
      },
      "source": [
        "#implementing PCA\n",
        "from sklearn.decomposition import PCA\n",
        "pca=PCA(n_components=7)\n",
        "pca.fit(Xnorm)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PCA(copy=True, iterated_power='auto', n_components=7, random_state=None,\n",
              "    svd_solver='auto', tol=0.0, whiten=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9DHSHWv0xbEj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "49091423-11a4-4bb0-cd4c-f4efe98f154f"
      },
      "source": [
        "#see the variance\n",
        "var=pca.explained_variance_ratio_\n",
        "print(var)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.64839201 0.21223507 0.08488145 0.04618012 0.00564185 0.00191687\n",
            " 0.00066636]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LaO1YuCqxpIk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "outputId": "44353833-f74a-4fad-9c41-a989bdfe87f7"
      },
      "source": [
        "#calculate cummulative variance\n",
        "\n",
        "#Cumulative Variance explains\n",
        "var1=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)\n",
        "print(var1)\n",
        "plt.plot(var1)\n",
        "plt.xlabel(\"Principal components\")\n",
        "plt.ylabel(\"Variance captured\")\n",
        "plt.title('Variance captured against adding a feature')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[64.84 86.06 94.55 99.17 99.73 99.92 99.99]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Variance captured against adding a feature')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 142
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BI0i3nJNy-jk",
        "colab_type": "text"
      },
      "source": [
        "**Number of Variables required to capture 89% variance**:\n",
        "With first two variables we can capture almost 86.06% variance but to get to capture 89% we will have to include the third variable and the captured variance will then be equal to 94.55%.\n",
        "\n",
        "**Number of Variables required to capture 99% variance**:\n",
        "To capture 99% variance we will have to include first 4 varianbles as they give a total variance of 99.17% \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x9JPYP0vLKzp",
        "colab_type": "text"
      },
      "source": [
        "2. Determine the purity of clusters formed by the number of principal components which captured 89% and 99% variances respectively. Plot a line graph of the purity scores against the captured variances. Discuss your findings. __(7 marks)__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8_a-xp2PKpya",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "553239a7-3f49-4c50-e79e-831deab7a101"
      },
      "source": [
        "pca_for_89 = PCA(n_components = 3)\n",
        "pca_for_89.fit(Xnorm)\n",
        "varnce_for_89 = pca_for_89.explained_variance_ratio_\n",
        "print(varnce_for_89)\n",
        "fit_for_89 = pca_for_89.fit_transform(Xnorm)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.64839201 0.21223507 0.08488145]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p70mj5YMfS1h",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "outputId": "69804d55-a7de-4b1d-e581-3cfff31d130b"
      },
      "source": [
        "# create a list to store total sqaured distance\n",
        "tsd= []\n",
        "range_k = range(1,8)\n",
        "\n",
        "for k in range_k:\n",
        "    kmeans = skc.KMeans(n_clusters = k)\n",
        "    kmeans = kmeans.fit(fit_for_89)\n",
        "    tsd.append(kmeans.inertia_)\n",
        "    \n",
        "# Plot the elbow plot\n",
        "plt.plot(range_k,tsd,'-bx')\n",
        "plt.xlabel(\"Number of clusters\")\n",
        "plt.ylabel(\"Sum of Squared distance\")\n",
        "plt.title('The Elbow Method showing the optimal number of Clusters')\n",
        "plt.show()\n",
        "print(tsd)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "[1588.4543273963004, 773.8618862187227, 377.24009477077715, 323.9340230478383, 283.70787388995325, 246.29430880216137, 224.86073069079708]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s7RHUbeALfTY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "59dc9b4a-7c27-4676-8036-01e74585fd58"
      },
      "source": [
        "# initialise KMeans with 3 clusters(based on elbow plot) and using first three features\n",
        "kmeans_for_89 = KMeans(n_clusters = 3,random_state = 5) \n",
        "kmeans_for_89.fit(fit_for_89) \n",
        "labels_for_89    = kmeans_for_89.labels_\n",
        "\n",
        "# calculate purity score for PCs that  captured 89%\n",
        "print(\"Purity score for PCs that  captured 89%: \",calc_purity(Class,labels_for_89))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Purity score for PCs that  captured 89%:  0.9714285714285714\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IGU0HfvOP4tY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "545f8105-a87f-4bb1-83f7-c28e6a4a7db7"
      },
      "source": [
        "# Purity value using priniciple components that cover 89% variance\n",
        "\n",
        "pca_for_99 = PCA(n_components = 4)\n",
        "pca_for_99.fit(Xnorm)\n",
        "varnce_for_99 = pca_for_99.explained_variance_ratio_\n",
        "print(varnce_for_99)\n",
        "fit_for_99 = pca_for_99.fit_transform(Xnorm)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.64839201 0.21223507 0.08488145 0.04618012]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "by3ANGueftm-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "outputId": "42f69919-31a7-4024-b863-34ba09a51238"
      },
      "source": [
        "# create a list to store total sqaured distance\n",
        "tsd= []\n",
        "range_k = range(1,8)\n",
        "\n",
        "for k in range_k:\n",
        "    kmeans = skc.KMeans(n_clusters = k)\n",
        "    kmeans = kmeans.fit(fit_for_99)\n",
        "    tsd.append(kmeans.inertia_)\n",
        "    \n",
        "# Plot the elbow plot\n",
        "plt.plot(range_k,tsd,'-bx')\n",
        "plt.xlabel(\"Number of clusters\")\n",
        "plt.ylabel(\"Sum of Squared distance\")\n",
        "plt.title('The Elbow Method showing the optimal number of Clusters')\n",
        "plt.show()\n",
        "print(tsd)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "[1666.0369319189635, 850.6007034427728, 442.8474898482044, 388.5411566728468, 342.0296126673537, 315.6187047125835, 283.0775218678467]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LYJOzWX1Qs_Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "37cbeb89-c30a-4249-8ad7-530132762146"
      },
      "source": [
        "# initialise KMeans with 3 clusters(based on elbow plot) and using first 4 features\n",
        "kmeans_for_99 = KMeans(n_clusters = 3,random_state = 5) \n",
        "kmeans_for_99.fit(fit_for_99) \n",
        "labels_for_99    = kmeans_for_99.labels_\n",
        "\n",
        "# calculate purity score for PCs that  captured 99%\n",
        "print(\"Purity score for PCs that  captured 99%: \",calc_purity(Class,labels_for_99))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Purity score for PCs that  captured 89%:  0.9809523809523809\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XrdgBzl8R5oZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "d583655c-03a1-46ea-9f5f-c6ad5ca74665"
      },
      "source": [
        "variances = np.array([0.89,0.99])\n",
        "purity_scores = np.array([calc_purity(Class,labels_for_89),calc_purity(Class,labels_for_99)])\n",
        "plt.plot(variances,purity_scores)\n",
        "plt.xlabel(\"Variance\")\n",
        "plt.ylabel(\"Purity Score\")\n",
        "plt.title('Purity scores against the Captured Variances')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a5mNVpqorul6",
        "colab_type": "text"
      },
      "source": [
        "**Graph**: From the graph of purity score against captured varaince we can see that there is positive relationship between them. When the captured variance increases the purity score also increases."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8RmhzV_MK-ia",
        "colab_type": "text"
      },
      "source": [
        "3. Let's assume you have two datasets one is linear and another is curved structural data.\n",
        "    - Can we apply PCA on these datasets? Justify your answer. __(3 marks)__ "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "biHMAd7GXGXG",
        "colab_type": "text"
      },
      "source": [
        "**PCA for Linear Dataset**: \n",
        "For the PCA to be applicable there are a few assumptions in which one assumption states that for PCA to be applicable on a dataset the dataset must be linear. This means that there must be linear relationship among the observations is linear. Performing PCA on a nonlinear dataset will give us meaningless result and to apply PCA on a non linear dataset we will first have to somhow apply a transformation on the none linear dataset and make in linear. \n",
        "\n",
        "**PCA for Curved Structured Dataset**:\n",
        "Yes we can apply PCA on a curved structured dataset but will have to transform the dataset first to make linear and then apply PCA. The risk when applying PCA to curved sturctured data is that upon reducing the dimensionality of the data we lose alot of the accuracy as well. The results obtained will not be as good after applying PCA on a curved strcutured dataset. \n"
      ]
    }
  ]
}